/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_cta_background_color = pgEnum(
  'enum_pages_blocks_cta_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_background_color = pgEnum(
  'enum_pages_blocks_content_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_media_block_background_color = pgEnum(
  'enum_pages_blocks_media_block_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_blocks_features_features_link_type = pgEnum(
  'enum_pages_blocks_features_features_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_features_features_link_appearance = pgEnum(
  'enum_pages_blocks_features_features_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_faq_filter_by_category = pgEnum(
  'enum_pages_blocks_faq_filter_by_category',
  [
    '',
    'general',
    'screen-time',
    'baby',
    'toddler',
    'preschooler',
    'elementary',
    'courses',
    'daycare',
    'municipality',
    'school',
  ],
)
export const enum_pages_blocks_course_archive_target_audience = pgEnum(
  'enum_pages_blocks_course_archive_target_audience',
  ['parents', 'daycare', 'schools', 'municipalities'],
)
export const enum_pages_blocks_course_archive_populate_by = pgEnum(
  'enum_pages_blocks_course_archive_populate_by',
  ['collection', 'selection', 'targetAudience'],
)
export const enum_pages_blocks_course_archive_layout = pgEnum(
  'enum_pages_blocks_course_archive_layout',
  ['grid', 'list'],
)
export const enum_pages_blocks_age_groups_archive_populate_by = pgEnum(
  'enum_pages_blocks_age_groups_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_age_groups_archive_layout = pgEnum(
  'enum_pages_blocks_age_groups_archive_layout',
  ['grid', 'list', 'timeline'],
)
export const enum_pages_blocks_posts_archive_populate_by = pgEnum(
  'enum_pages_blocks_posts_archive_populate_by',
  ['collection', 'selection', 'category'],
)
export const enum_pages_blocks_posts_archive_layout = pgEnum(
  'enum_pages_blocks_posts_archive_layout',
  ['grid', 'list', 'magazine'],
)
export const enum_pages_blocks_relume_header_variant = pgEnum(
  'enum_pages_blocks_relume_header_variant',
  ['header-01', 'header-05', 'header-46', 'header-47', 'header-50', 'header-54', 'header-62'],
)
export const enum_pages_blocks_relume_header_image_position = pgEnum(
  'enum_pages_blocks_relume_header_image_position',
  ['left', 'right'],
)
export const enum_pages_blocks_relume_header_alignment = pgEnum(
  'enum_pages_blocks_relume_header_alignment',
  ['left', 'center', 'right'],
)
export const enum_pages_blocks_relume_header_background_color = pgEnum(
  'enum_pages_blocks_relume_header_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_relume_layout_variant = pgEnum(
  'enum_pages_blocks_relume_layout_variant',
  ['layout-01', 'layout-03', 'layout-10', 'layout-192', 'layout-238', 'layout-239'],
)
export const enum_pages_blocks_relume_layout_primary_button_variant = pgEnum(
  'enum_pages_blocks_relume_layout_primary_button_variant',
  ['primary', 'secondary', 'link'],
)
export const enum_pages_blocks_relume_layout_secondary_button_variant = pgEnum(
  'enum_pages_blocks_relume_layout_secondary_button_variant',
  ['primary', 'secondary', 'link'],
)
export const enum_pages_blocks_relume_layout_image_position = pgEnum(
  'enum_pages_blocks_relume_layout_image_position',
  ['left', 'right'],
)
export const enum_pages_blocks_relume_layout_text_alignment = pgEnum(
  'enum_pages_blocks_relume_layout_text_alignment',
  ['left', 'center', 'right'],
)
export const enum_pages_blocks_relume_layout_background_color = pgEnum(
  'enum_pages_blocks_relume_layout_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_relume_c_t_a_variant = pgEnum(
  'enum_pages_blocks_relume_c_t_a_variant',
  ['cta-02', 'cta-20', 'cta-26'],
)
export const enum_pages_blocks_relume_c_t_a_button_variant = pgEnum(
  'enum_pages_blocks_relume_c_t_a_button_variant',
  ['primary', 'secondary'],
)
export const enum_pages_blocks_relume_c_t_a_alignment = pgEnum(
  'enum_pages_blocks_relume_c_t_a_alignment',
  ['left', 'center'],
)
export const enum_pages_blocks_relume_c_t_a_background_color = pgEnum(
  'enum_pages_blocks_relume_c_t_a_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_relume_gallery_images_link_type = pgEnum(
  'enum_pages_blocks_relume_gallery_images_link_type',
  ['none', 'reference', 'custom'],
)
export const enum_pages_blocks_relume_gallery_variant = pgEnum(
  'enum_pages_blocks_relume_gallery_variant',
  ['gallery-04', 'gallery-08'],
)
export const enum_pages_blocks_relume_gallery_background_color = pgEnum(
  'enum_pages_blocks_relume_gallery_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_relume_pricing_plans_button_link_type = pgEnum(
  'enum_pages_blocks_relume_pricing_plans_button_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_relume_pricing_background_color = pgEnum(
  'enum_pages_blocks_relume_pricing_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const plat = pgEnum('plat', [
  'linkedin',
  'twitter',
  'instagram',
  'facebook',
  'dribbble',
  'github',
  'website',
])
export const hs_btn_type = pgEnum('hs_btn_type', ['reference', 'custom'])
export const enum_pages_blocks_relume_team_background_color = pgEnum(
  'enum_pages_blocks_relume_team_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_blocks_relume_contact_contact_methods_icon = pgEnum(
  'enum_pages_blocks_relume_contact_contact_methods_icon',
  ['email', 'phone', 'location', 'calendar', 'message', 'clock'],
)
export const enum_pages_blocks_relume_contact_background_color = pgEnum(
  'enum_pages_blocks_relume_contact_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_cta_background_color = pgEnum(
  'enum__pages_v_blocks_cta_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_background_color = pgEnum(
  'enum__pages_v_blocks_content_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_media_block_background_color = pgEnum(
  'enum__pages_v_blocks_media_block_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_blocks_features_features_link_type = pgEnum(
  'enum__pages_v_blocks_features_features_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_features_features_link_appearance = pgEnum(
  'enum__pages_v_blocks_features_features_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_faq_filter_by_category = pgEnum(
  'enum__pages_v_blocks_faq_filter_by_category',
  [
    '',
    'general',
    'screen-time',
    'baby',
    'toddler',
    'preschooler',
    'elementary',
    'courses',
    'daycare',
    'municipality',
    'school',
  ],
)
export const enum__pages_v_blocks_course_archive_target_audience = pgEnum(
  'enum__pages_v_blocks_course_archive_target_audience',
  ['parents', 'daycare', 'schools', 'municipalities'],
)
export const enum__pages_v_blocks_course_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_course_archive_populate_by',
  ['collection', 'selection', 'targetAudience'],
)
export const enum__pages_v_blocks_course_archive_layout = pgEnum(
  'enum__pages_v_blocks_course_archive_layout',
  ['grid', 'list'],
)
export const enum__pages_v_blocks_age_groups_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_age_groups_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_age_groups_archive_layout = pgEnum(
  'enum__pages_v_blocks_age_groups_archive_layout',
  ['grid', 'list', 'timeline'],
)
export const enum__pages_v_blocks_posts_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_posts_archive_populate_by',
  ['collection', 'selection', 'category'],
)
export const enum__pages_v_blocks_posts_archive_layout = pgEnum(
  'enum__pages_v_blocks_posts_archive_layout',
  ['grid', 'list', 'magazine'],
)
export const enum__pages_v_blocks_relume_header_variant = pgEnum(
  'enum__pages_v_blocks_relume_header_variant',
  ['header-01', 'header-05', 'header-46', 'header-47', 'header-50', 'header-54', 'header-62'],
)
export const enum__pages_v_blocks_relume_header_image_position = pgEnum(
  'enum__pages_v_blocks_relume_header_image_position',
  ['left', 'right'],
)
export const enum__pages_v_blocks_relume_header_alignment = pgEnum(
  'enum__pages_v_blocks_relume_header_alignment',
  ['left', 'center', 'right'],
)
export const enum__pages_v_blocks_relume_header_background_color = pgEnum(
  'enum__pages_v_blocks_relume_header_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_layout_variant = pgEnum(
  'enum__pages_v_blocks_relume_layout_variant',
  ['layout-01', 'layout-03', 'layout-10', 'layout-192', 'layout-238', 'layout-239'],
)
export const enum__pages_v_blocks_relume_layout_primary_button_variant = pgEnum(
  'enum__pages_v_blocks_relume_layout_primary_button_variant',
  ['primary', 'secondary', 'link'],
)
export const enum__pages_v_blocks_relume_layout_secondary_button_variant = pgEnum(
  'enum__pages_v_blocks_relume_layout_secondary_button_variant',
  ['primary', 'secondary', 'link'],
)
export const enum__pages_v_blocks_relume_layout_image_position = pgEnum(
  'enum__pages_v_blocks_relume_layout_image_position',
  ['left', 'right'],
)
export const enum__pages_v_blocks_relume_layout_text_alignment = pgEnum(
  'enum__pages_v_blocks_relume_layout_text_alignment',
  ['left', 'center', 'right'],
)
export const enum__pages_v_blocks_relume_layout_background_color = pgEnum(
  'enum__pages_v_blocks_relume_layout_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_c_t_a_variant = pgEnum(
  'enum__pages_v_blocks_relume_c_t_a_variant',
  ['cta-02', 'cta-20', 'cta-26'],
)
export const enum__pages_v_blocks_relume_c_t_a_button_variant = pgEnum(
  'enum__pages_v_blocks_relume_c_t_a_button_variant',
  ['primary', 'secondary'],
)
export const enum__pages_v_blocks_relume_c_t_a_alignment = pgEnum(
  'enum__pages_v_blocks_relume_c_t_a_alignment',
  ['left', 'center'],
)
export const enum__pages_v_blocks_relume_c_t_a_background_color = pgEnum(
  'enum__pages_v_blocks_relume_c_t_a_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_gallery_images_link_type = pgEnum(
  'enum__pages_v_blocks_relume_gallery_images_link_type',
  ['none', 'reference', 'custom'],
)
export const enum__pages_v_blocks_relume_gallery_variant = pgEnum(
  'enum__pages_v_blocks_relume_gallery_variant',
  ['gallery-04', 'gallery-08'],
)
export const enum__pages_v_blocks_relume_gallery_background_color = pgEnum(
  'enum__pages_v_blocks_relume_gallery_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_pricing_plans_button_link_type = pgEnum(
  'enum__pages_v_blocks_relume_pricing_plans_button_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_relume_pricing_background_color = pgEnum(
  'enum__pages_v_blocks_relume_pricing_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_team_background_color = pgEnum(
  'enum__pages_v_blocks_relume_team_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_blocks_relume_contact_contact_methods_icon = pgEnum(
  'enum__pages_v_blocks_relume_contact_contact_methods_icon',
  ['email', 'phone', 'location', 'calendar', 'message', 'clock'],
)
export const enum__pages_v_blocks_relume_contact_background_color = pgEnum(
  'enum__pages_v_blocks_relume_contact_background_color',
  [
    '',
    'bg-[#FFFFFF]',
    'bg-[#F2F2F2]',
    'bg-[#B8B8B5]',
    'bg-[#656564]',
    'bg-[#000000]',
    'bg-[#EDF3F5]',
    'bg-[#B396AE]',
    'bg-[#4F758D]',
    'bg-[#3F5D70]',
    'bg-[#17252A]',
    'bg-[#E5F7F4]',
    'bg-[#40C7B8]',
    'bg-[#01B09A]',
    'bg-[#008C7B]',
    'bg-[#00432E]',
    'bg-[#FDF4FB]',
    'bg-[#F6EEE8]',
    'bg-[#F5E0DF]',
    'bg-[#C2BAB2]',
    'bg-[#484542]',
    'bg-[#FFF0F0]',
    'bg-[#FF7971]',
    'bg-[#FF6B68]',
    'bg-[#CC5555]',
    'bg-[#4C2020]',
    'bg-[#F2F8FC]',
    'bg-[#B2D5EA]',
    'bg-[#A6D2E4]',
    'bg-[#61A8BA]',
    'bg-[#353F43]',
  ],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_courses_target_audience = pgEnum('enum_courses_target_audience', [
  'parents',
  'daycare',
  'schools',
  'municipalities',
])
export const enum_courses_status = pgEnum('enum_courses_status', ['draft', 'published'])
export const enum__courses_v_version_target_audience = pgEnum(
  'enum__courses_v_version_target_audience',
  ['parents', 'daycare', 'schools', 'municipalities'],
)
export const enum__courses_v_version_status = pgEnum('enum__courses_v_version_status', [
  'draft',
  'published',
])
export const enum_age_groups_content_image_position = pgEnum(
  'enum_age_groups_content_image_position',
  ['left', 'right'],
)
export const enum_age_groups_resources_type = pgEnum('enum_age_groups_resources_type', [
  'article',
  'video',
  'app',
  'website',
  'book',
])
export const enum_age_groups_status = pgEnum('enum_age_groups_status', ['draft', 'published'])
export const enum__age_groups_v_version_content_image_position = pgEnum(
  'enum__age_groups_v_version_content_image_position',
  ['left', 'right'],
)
export const enum__age_groups_v_version_resources_type = pgEnum(
  'enum__age_groups_v_version_resources_type',
  ['article', 'video', 'app', 'website', 'book'],
)
export const enum__age_groups_v_version_status = pgEnum('enum__age_groups_v_version_status', [
  'draft',
  'published',
])
export const enum_services_service_type = pgEnum('enum_services_service_type', [
  'daycare',
  'municipality',
  'school',
  'parents',
  'general',
])
export const enum_services_status = pgEnum('enum_services_status', ['draft', 'published'])
export const enum__services_v_version_service_type = pgEnum(
  'enum__services_v_version_service_type',
  ['daycare', 'municipality', 'school', 'parents', 'general'],
)
export const enum__services_v_version_status = pgEnum('enum__services_v_version_status', [
  'draft',
  'published',
])
export const enum_testimonials_tags = pgEnum('enum_testimonials_tags', [
  'screen-time',
  'parenting',
  'education',
  'balance',
  'baby',
  'toddler',
  'preschooler',
  'elementary',
])
export const enum_testimonials_rating = pgEnum('enum_testimonials_rating', [
  '1',
  '2',
  '3',
  '4',
  '5',
])
export const enum_testimonials_service_used = pgEnum('enum_testimonials_service_used', [
  'general',
  'course',
  'daycare',
  'municipality',
  'school',
])
export const enum_faq_tags = pgEnum('enum_faq_tags', [
  'parenting',
  'education',
  'balance',
  'safety',
  'development',
  'media',
  'apps',
  'games',
  'videos',
  'social-media',
])
export const enum_faq_category = pgEnum('enum_faq_category', [
  'general',
  'screen-time',
  'baby',
  'toddler',
  'preschooler',
  'elementary',
  'courses',
  'daycare',
  'municipality',
  'school',
  'technical',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_header_cta_button_link_type = pgEnum('enum_header_cta_button_link_type', [
  'reference',
  'custom',
])
export const enum_header_cta_button_style = pgEnum('enum_header_cta_button_style', [
  'primary',
  'secondary',
  'accent',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_site_settings_notifications_type = pgEnum(
  'enum_site_settings_notifications_type',
  ['info', 'warning', 'success', 'error'],
)
export const enum_site_settings_forms_newsletter_provider = pgEnum(
  'enum_site_settings_forms_newsletter_provider',
  ['mailchimp', 'convertkit', 'klaviyo', 'custom'],
)
export const enum_style_settings_background_colors_category = pgEnum(
  'enum_style_settings_background_colors_category',
  ['neutrals', 'smalt-blue', 'persian-green', 'merino', 'bittersweet', 'regent-st-blue', 'other'],
)
export const enum_style_settings_background_colors_shade = pgEnum(
  'enum_style_settings_background_colors_shade',
  ['lightest', 'lighter', 'light', 'base', 'dark', 'darker', 'darkest'],
)
export const enum_style_settings_text_colors_usage = pgEnum(
  'enum_style_settings_text_colors_usage',
  ['headings', 'body', 'links', 'accent', 'muted'],
)
export const enum_style_settings_font_families_category = pgEnum(
  'enum_style_settings_font_families_category',
  ['headings', 'body', 'display', 'mono'],
)
export const enum_style_settings_font_sizes_category = pgEnum(
  'enum_style_settings_font_sizes_category',
  ['display', 'heading', 'body', 'caption'],
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    backgroundColor: enum_pages_blocks_cta_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    backgroundColor: enum_pages_blocks_content_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    backgroundColor: enum_pages_blocks_media_block_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_features_features = pgTable(
  'pages_blocks_features_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    link_type: enum_pages_blocks_features_features_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_features_features_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_features_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_features_features_parent_id_idx').on(columns._parentID),
    pages_blocks_features_features_icon_idx: index('pages_blocks_features_features_icon_idx').on(
      columns.icon,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_features.id],
      name: 'pages_blocks_features_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_features = pgTable(
  'pages_blocks_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_features_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_features_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_newsletter_c_t_a = pgTable(
  'pages_blocks_newsletter_c_t_a',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Schrijf je nu in!'),
    description: varchar('description').default(
      'Begin vandaag nog met het creëren van een gezonde digitale balans voor je gezin.',
    ),
    buttonText: varchar('button_text').default('Inschrijven'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    privacyText: varchar('privacy_text').default(
      'Door op Inschrijven te klikken, ga je akkoord met onze <a href="/privacy" class="underline">Algemene Voorwaarden</a>.',
    ),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_newsletter_c_t_a_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_newsletter_c_t_a_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_newsletter_c_t_a_path_idx').on(columns._path),
    pages_blocks_newsletter_c_t_a_image_idx: index('pages_blocks_newsletter_c_t_a_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_newsletter_c_t_a_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_testimonials = pgTable(
  'pages_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonials_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_faq = pgTable(
  'pages_blocks_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Veelgestelde Vragen'),
    description: varchar('description'),
    filterByCategory: enum_pages_blocks_faq_filter_by_category('filter_by_category'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_faq_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_faq_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_course_archive_target_audience = pgTable(
  'pages_blocks_course_archive_target_audience',
  {
    order: integer('order').notNull(),
    parent: varchar('parent_id').notNull(),
    value: enum_pages_blocks_course_archive_target_audience('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('pages_blocks_course_archive_target_audience_order_idx').on(columns.order),
    parentIdx: index('pages_blocks_course_archive_target_audience_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages_blocks_course_archive.id],
      name: 'pages_blocks_course_archive_target_audience_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_course_archive = pgTable(
  'pages_blocks_course_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Cursussen & Trainingen'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_course_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    showCategories: boolean('show_categories').default(true),
    layout: enum_pages_blocks_course_archive_layout('layout').default('grid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_course_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_course_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_course_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_course_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_age_groups_archive = pgTable(
  'pages_blocks_age_groups_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Voor Elke Leeftijd'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy:
      enum_pages_blocks_age_groups_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    layout: enum_pages_blocks_age_groups_archive_layout('layout').default('grid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_age_groups_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_age_groups_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_age_groups_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_age_groups_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_posts_archive = pgTable(
  'pages_blocks_posts_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Blog'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_posts_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    showCategories: boolean('show_categories').default(true),
    layout: enum_pages_blocks_posts_archive_layout('layout').default('grid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_posts_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_posts_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_posts_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_posts_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_header_features = pgTable(
  'pages_blocks_relume_header_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    text: varchar('text'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_header_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_header_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_header.id],
      name: 'pages_blocks_relume_header_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_header = pgTable(
  'pages_blocks_relume_header',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    variant: enum_pages_blocks_relume_header_variant('variant').default('header-01'),
    title: varchar('title').default('Schermtijd weer helemaal in balans'),
    description: varchar('description').default(
      'Bij Schermblij helpen we ouders om een gezonde balans te creëren tussen online en offline activiteiten.',
    ),
    primaryButton_text: varchar('primary_button_text').default('Leer Meer'),
    primaryButton_link: varchar('primary_button_link').default('#'),
    primaryButton_show: boolean('primary_button_show').default(true),
    secondaryButton_text: varchar('secondary_button_text').default('Aanmelden'),
    secondaryButton_link: varchar('secondary_button_link').default('#'),
    secondaryButton_show: boolean('secondary_button_show').default(true),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition:
      enum_pages_blocks_relume_header_image_position('image_position').default('right'),
    alignment: enum_pages_blocks_relume_header_alignment('alignment').default('left'),
    overlayOpacity: numeric('overlay_opacity').default('50'),
    backgroundColor:
      enum_pages_blocks_relume_header_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_header_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_header_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_header_path_idx').on(columns._path),
    pages_blocks_relume_header_image_idx: index('pages_blocks_relume_header_image_idx').on(
      columns.image,
    ),
    pages_blocks_relume_header_background_image_idx: index(
      'pages_blocks_relume_header_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_header_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_layout_features = pgTable(
  'pages_blocks_relume_layout_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_layout_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_layout_features_parent_id_idx').on(columns._parentID),
    pages_blocks_relume_layout_features_icon_idx: index(
      'pages_blocks_relume_layout_features_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_layout.id],
      name: 'pages_blocks_relume_layout_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_layout_columns = pgTable(
  'pages_blocks_relume_layout_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    buttonText: varchar('button_text'),
    buttonLink: varchar('button_link').default('#'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_layout_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_layout_columns_parent_id_idx').on(columns._parentID),
    pages_blocks_relume_layout_columns_icon_idx: index(
      'pages_blocks_relume_layout_columns_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_layout.id],
      name: 'pages_blocks_relume_layout_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_layout = pgTable(
  'pages_blocks_relume_layout',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    variant: enum_pages_blocks_relume_layout_variant('variant').default('layout-03'),
    tagline: varchar('tagline'),
    title: varchar('title').default('Ontdek de voordelen van digitale media'),
    description: varchar('description').default(
      'Digitale media kunnen een waardevolle aanvulling zijn op de ontwikkeling van uw kinderen.',
    ),
    primaryButton_text: varchar('primary_button_text').default('Leer Meer'),
    primaryButton_link: varchar('primary_button_link').default('#'),
    primaryButton_variant:
      enum_pages_blocks_relume_layout_primary_button_variant('primary_button_variant').default(
        'secondary',
      ),
    primaryButton_show: boolean('primary_button_show').default(true),
    secondaryButton_text: varchar('secondary_button_text').default('Ontdek Meer'),
    secondaryButton_link: varchar('secondary_button_link').default('#'),
    secondaryButton_variant: enum_pages_blocks_relume_layout_secondary_button_variant(
      'secondary_button_variant',
    ).default('link'),
    secondaryButton_show: boolean('secondary_button_show').default(true),
    mainImage: integer('main_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition:
      enum_pages_blocks_relume_layout_image_position('image_position').default('right'),
    textAlignment: enum_pages_blocks_relume_layout_text_alignment('text_alignment').default('left'),
    backgroundColor:
      enum_pages_blocks_relume_layout_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_layout_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_layout_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_layout_path_idx').on(columns._path),
    pages_blocks_relume_layout_main_image_idx: index(
      'pages_blocks_relume_layout_main_image_idx',
    ).on(columns.mainImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_layout_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_c_t_a = pgTable(
  'pages_blocks_relume_c_t_a',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    variant: enum_pages_blocks_relume_c_t_a_variant('variant').default('cta-02'),
    title: varchar('title').default('Schrijf je nu in!'),
    description: varchar('description').default(
      'Begin vandaag nog met het creëren van een gezonde digitale balans voor je gezin.',
    ),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    buttonText: varchar('button_text').default('Inschrijven'),
    buttonVariant:
      enum_pages_blocks_relume_c_t_a_button_variant('button_variant').default('primary'),
    emailPlaceholder: varchar('email_placeholder').default('Voer je e-mail in'),
    privacyText: varchar('privacy_text').default(
      'Door je aan te melden ga je akkoord met onze Algemene Voorwaarden.',
    ),
    alignment: enum_pages_blocks_relume_c_t_a_alignment('alignment').default('left'),
    backgroundColor:
      enum_pages_blocks_relume_c_t_a_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_c_t_a_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_c_t_a_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_c_t_a_path_idx').on(columns._path),
    pages_blocks_relume_c_t_a_image_idx: index('pages_blocks_relume_c_t_a_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_c_t_a_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_gallery_images = pgTable(
  'pages_blocks_relume_gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum_pages_blocks_relume_gallery_images_link_type('link_type').default('none'),
    link_url: varchar('link_url'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_gallery_images_parent_id_idx').on(columns._parentID),
    pages_blocks_relume_gallery_images_image_idx: index(
      'pages_blocks_relume_gallery_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_gallery.id],
      name: 'pages_blocks_relume_gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_gallery = pgTable(
  'pages_blocks_relume_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    variant: enum_pages_blocks_relume_gallery_variant('variant').default('gallery-04'),
    title: varchar('title').default('Afbeeldingen Galerij'),
    description: varchar('description'),
    backgroundColor:
      enum_pages_blocks_relume_gallery_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_gallery_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_pricing_plans_features = pgTable(
  'pages_blocks_relume_pricing_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    text: varchar('text'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_pricing_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_pricing_plans_features_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_pricing_plans.id],
      name: 'pages_blocks_relume_pricing_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_pricing_plans = pgTable(
  'pages_blocks_relume_pricing_plans',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    monthlyPrice: varchar('monthly_price'),
    yearlyPrice: varchar('yearly_price'),
    yearlyDiscount: varchar('yearly_discount'),
    buttonText: varchar('button_text').default('Aan de slag'),
    buttonLink_type:
      enum_pages_blocks_relume_pricing_plans_button_link_type('button_link_type').default(
        'reference',
      ),
    buttonLink_url: varchar('button_link_url'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_pricing_plans_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_pricing_plans_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_pricing.id],
      name: 'pages_blocks_relume_pricing_plans_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_pricing = pgTable(
  'pages_blocks_relume_pricing',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    tagline: varchar('tagline').default('Prijzen'),
    title: varchar('title').default('Prijsplan'),
    description: varchar('description').default('Ontdek onze flexibele cursusopties voor ouders.'),
    monthlyTabLabel: varchar('monthly_tab_label').default('Maandelijks'),
    yearlyTabLabel: varchar('yearly_tab_label').default('Jaarlijks'),
    backgroundColor:
      enum_pages_blocks_relume_pricing_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_pricing_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_pricing_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_pricing_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_pricing_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_team_team_members = pgTable(
  'pages_blocks_relume_team_team_members',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    photo: integer('photo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    name: varchar('name'),
    position: varchar('position'),
    bio: varchar('bio'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_team_team_members_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_team_team_members_parent_id_idx').on(
      columns._parentID,
    ),
    pages_blocks_relume_team_team_members_photo_idx: index(
      'pages_blocks_relume_team_team_members_photo_idx',
    ).on(columns.photo),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_team.id],
      name: 'pages_blocks_relume_team_team_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_team_social_links = pgTable(
  'pages_blocks_relume_team_social_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    teamMember: varchar('team_member'),
    platform: plat('platform'),
    url: varchar('url'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_team_social_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_team_social_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_team.id],
      name: 'pages_blocks_relume_team_social_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_team = pgTable(
  'pages_blocks_relume_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    tagline: varchar('tagline').default('Team'),
    title: varchar('title').default('Ons Team'),
    description: varchar('description').default('Professionele mediacoaches voor de onderbouw'),
    hiringSection_show: boolean('hiring_section_show').default(true),
    hiringSection_title: varchar('hiring_section_title').default('We werven!'),
    hiringSection_description: varchar('hiring_section_description').default(
      'Word onderdeel van ons groeiende team!',
    ),
    hiringSection_buttonText: varchar('hiring_section_button_text').default('Open posities'),
    hiringSection_buttonLink_type: hs_btn_type('hiring_section_button_link_type').default(
      'reference',
    ),
    hiringSection_buttonLink_url: varchar('hiring_section_button_link_url'),
    backgroundColor: enum_pages_blocks_relume_team_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_team_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_team_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_contact_contact_methods = pgTable(
  'pages_blocks_relume_contact_contact_methods',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: enum_pages_blocks_relume_contact_contact_methods_icon('icon').default('email'),
    title: varchar('title'),
    description: varchar('description'),
    contactInfo: varchar('contact_info'),
    link: varchar('link'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_contact_contact_methods_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_contact_contact_methods_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_relume_contact.id],
      name: 'pages_blocks_relume_contact_contact_methods_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_relume_contact = pgTable(
  'pages_blocks_relume_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    backgroundColor:
      enum_pages_blocks_relume_contact_background_color('background_color').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_relume_contact_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_relume_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_relume_contact_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_relume_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    postsID: integer('posts_id'),
    testimonialsID: integer('testimonials_id'),
    faqID: integer('faq_id'),
    coursesID: integer('courses_id'),
    ageGroupsID: integer('age_groups_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_testimonials_id_idx: index('pages_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    pages_rels_faq_id_idx: index('pages_rels_faq_id_idx').on(columns.faqID),
    pages_rels_courses_id_idx: index('pages_rels_courses_id_idx').on(columns.coursesID),
    pages_rels_age_groups_id_idx: index('pages_rels_age_groups_id_idx').on(columns.ageGroupsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'pages_rels_testimonials_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'pages_rels_faq_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'pages_rels_courses_fk',
    }).onDelete('cascade'),
    ageGroupsIdFk: foreignKey({
      columns: [columns['ageGroupsID']],
      foreignColumns: [age_groups.id],
      name: 'pages_rels_age_groups_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    backgroundColor: enum__pages_v_blocks_cta_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    backgroundColor: enum__pages_v_blocks_content_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    backgroundColor:
      enum__pages_v_blocks_media_block_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_features_features = pgTable(
  '_pages_v_blocks_features_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    link_type: enum__pages_v_blocks_features_features_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_features_features_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_features_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_features_features_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_features_features_icon_idx: index(
      '_pages_v_blocks_features_features_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_features.id],
      name: '_pages_v_blocks_features_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_features = pgTable(
  '_pages_v_blocks_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_features_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_features_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_newsletter_c_t_a = pgTable(
  '_pages_v_blocks_newsletter_c_t_a',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Schrijf je nu in!'),
    description: varchar('description').default(
      'Begin vandaag nog met het creëren van een gezonde digitale balans voor je gezin.',
    ),
    buttonText: varchar('button_text').default('Inschrijven'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    privacyText: varchar('privacy_text').default(
      'Door op Inschrijven te klikken, ga je akkoord met onze <a href="/privacy" class="underline">Algemene Voorwaarden</a>.',
    ),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_newsletter_c_t_a_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_newsletter_c_t_a_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_newsletter_c_t_a_path_idx').on(columns._path),
    _pages_v_blocks_newsletter_c_t_a_image_idx: index(
      '_pages_v_blocks_newsletter_c_t_a_image_idx',
    ).on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_newsletter_c_t_a_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_testimonials = pgTable(
  '_pages_v_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonials_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_faq = pgTable(
  '_pages_v_blocks_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Veelgestelde Vragen'),
    description: varchar('description'),
    filterByCategory: enum__pages_v_blocks_faq_filter_by_category('filter_by_category'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_faq_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_faq_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_course_archive_target_audience = pgTable(
  '_pages_v_blocks_course_archive_target_audience',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum__pages_v_blocks_course_archive_target_audience('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('_pages_v_blocks_course_archive_target_audience_order_idx').on(columns.order),
    parentIdx: index('_pages_v_blocks_course_archive_target_audience_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v_blocks_course_archive.id],
      name: '_pages_v_blocks_course_archive_target_audience_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_course_archive = pgTable(
  '_pages_v_blocks_course_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Cursussen & Trainingen'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy:
      enum__pages_v_blocks_course_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    showCategories: boolean('show_categories').default(true),
    layout: enum__pages_v_blocks_course_archive_layout('layout').default('grid'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_course_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_course_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_course_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_course_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_age_groups_archive = pgTable(
  '_pages_v_blocks_age_groups_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Voor Elke Leeftijd'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy:
      enum__pages_v_blocks_age_groups_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    layout: enum__pages_v_blocks_age_groups_archive_layout('layout').default('grid'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_age_groups_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_age_groups_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_age_groups_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_age_groups_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_posts_archive = pgTable(
  '_pages_v_blocks_posts_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Blog'),
    description: varchar('description'),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_posts_archive_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    showCategories: boolean('show_categories').default(true),
    layout: enum__pages_v_blocks_posts_archive_layout('layout').default('grid'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_posts_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_posts_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_posts_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_posts_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_header_features = pgTable(
  '_pages_v_blocks_relume_header_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    text: varchar('text'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_header_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_header_features_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_header.id],
      name: '_pages_v_blocks_relume_header_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_header = pgTable(
  '_pages_v_blocks_relume_header',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    variant: enum__pages_v_blocks_relume_header_variant('variant').default('header-01'),
    title: varchar('title').default('Schermtijd weer helemaal in balans'),
    description: varchar('description').default(
      'Bij Schermblij helpen we ouders om een gezonde balans te creëren tussen online en offline activiteiten.',
    ),
    primaryButton_text: varchar('primary_button_text').default('Leer Meer'),
    primaryButton_link: varchar('primary_button_link').default('#'),
    primaryButton_show: boolean('primary_button_show').default(true),
    secondaryButton_text: varchar('secondary_button_text').default('Aanmelden'),
    secondaryButton_link: varchar('secondary_button_link').default('#'),
    secondaryButton_show: boolean('secondary_button_show').default(true),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition:
      enum__pages_v_blocks_relume_header_image_position('image_position').default('right'),
    alignment: enum__pages_v_blocks_relume_header_alignment('alignment').default('left'),
    overlayOpacity: numeric('overlay_opacity').default('50'),
    backgroundColor:
      enum__pages_v_blocks_relume_header_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_header_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_header_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_header_path_idx').on(columns._path),
    _pages_v_blocks_relume_header_image_idx: index('_pages_v_blocks_relume_header_image_idx').on(
      columns.image,
    ),
    _pages_v_blocks_relume_header_background_image_idx: index(
      '_pages_v_blocks_relume_header_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_header_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_layout_features = pgTable(
  '_pages_v_blocks_relume_layout_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_layout_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_layout_features_parent_id_idx').on(
      columns._parentID,
    ),
    _pages_v_blocks_relume_layout_features_icon_idx: index(
      '_pages_v_blocks_relume_layout_features_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_layout.id],
      name: '_pages_v_blocks_relume_layout_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_layout_columns = pgTable(
  '_pages_v_blocks_relume_layout_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    buttonText: varchar('button_text'),
    buttonLink: varchar('button_link').default('#'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_layout_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_layout_columns_parent_id_idx').on(
      columns._parentID,
    ),
    _pages_v_blocks_relume_layout_columns_icon_idx: index(
      '_pages_v_blocks_relume_layout_columns_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_layout.id],
      name: '_pages_v_blocks_relume_layout_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_layout = pgTable(
  '_pages_v_blocks_relume_layout',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    variant: enum__pages_v_blocks_relume_layout_variant('variant').default('layout-03'),
    tagline: varchar('tagline'),
    title: varchar('title').default('Ontdek de voordelen van digitale media'),
    description: varchar('description').default(
      'Digitale media kunnen een waardevolle aanvulling zijn op de ontwikkeling van uw kinderen.',
    ),
    primaryButton_text: varchar('primary_button_text').default('Leer Meer'),
    primaryButton_link: varchar('primary_button_link').default('#'),
    primaryButton_variant:
      enum__pages_v_blocks_relume_layout_primary_button_variant('primary_button_variant').default(
        'secondary',
      ),
    primaryButton_show: boolean('primary_button_show').default(true),
    secondaryButton_text: varchar('secondary_button_text').default('Ontdek Meer'),
    secondaryButton_link: varchar('secondary_button_link').default('#'),
    secondaryButton_variant: enum__pages_v_blocks_relume_layout_secondary_button_variant(
      'secondary_button_variant',
    ).default('link'),
    secondaryButton_show: boolean('secondary_button_show').default(true),
    mainImage: integer('main_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition:
      enum__pages_v_blocks_relume_layout_image_position('image_position').default('right'),
    textAlignment:
      enum__pages_v_blocks_relume_layout_text_alignment('text_alignment').default('left'),
    backgroundColor:
      enum__pages_v_blocks_relume_layout_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_layout_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_layout_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_layout_path_idx').on(columns._path),
    _pages_v_blocks_relume_layout_main_image_idx: index(
      '_pages_v_blocks_relume_layout_main_image_idx',
    ).on(columns.mainImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_layout_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_c_t_a = pgTable(
  '_pages_v_blocks_relume_c_t_a',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    variant: enum__pages_v_blocks_relume_c_t_a_variant('variant').default('cta-02'),
    title: varchar('title').default('Schrijf je nu in!'),
    description: varchar('description').default(
      'Begin vandaag nog met het creëren van een gezonde digitale balans voor je gezin.',
    ),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    buttonText: varchar('button_text').default('Inschrijven'),
    buttonVariant:
      enum__pages_v_blocks_relume_c_t_a_button_variant('button_variant').default('primary'),
    emailPlaceholder: varchar('email_placeholder').default('Voer je e-mail in'),
    privacyText: varchar('privacy_text').default(
      'Door je aan te melden ga je akkoord met onze Algemene Voorwaarden.',
    ),
    alignment: enum__pages_v_blocks_relume_c_t_a_alignment('alignment').default('left'),
    backgroundColor:
      enum__pages_v_blocks_relume_c_t_a_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_c_t_a_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_c_t_a_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_c_t_a_path_idx').on(columns._path),
    _pages_v_blocks_relume_c_t_a_image_idx: index('_pages_v_blocks_relume_c_t_a_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_c_t_a_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_gallery_images = pgTable(
  '_pages_v_blocks_relume_gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum__pages_v_blocks_relume_gallery_images_link_type('link_type').default('none'),
    link_url: varchar('link_url'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_gallery_images_parent_id_idx').on(
      columns._parentID,
    ),
    _pages_v_blocks_relume_gallery_images_image_idx: index(
      '_pages_v_blocks_relume_gallery_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_gallery.id],
      name: '_pages_v_blocks_relume_gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_gallery = pgTable(
  '_pages_v_blocks_relume_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    variant: enum__pages_v_blocks_relume_gallery_variant('variant').default('gallery-04'),
    title: varchar('title').default('Afbeeldingen Galerij'),
    description: varchar('description'),
    backgroundColor:
      enum__pages_v_blocks_relume_gallery_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_gallery_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_pricing_plans_features = pgTable(
  '_pages_v_blocks_relume_pricing_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    text: varchar('text'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_pricing_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_pricing_plans_features_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_pricing_plans.id],
      name: '_pages_v_blocks_relume_pricing_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_pricing_plans = pgTable(
  '_pages_v_blocks_relume_pricing_plans',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    name: varchar('name'),
    monthlyPrice: varchar('monthly_price'),
    yearlyPrice: varchar('yearly_price'),
    yearlyDiscount: varchar('yearly_discount'),
    buttonText: varchar('button_text').default('Aan de slag'),
    buttonLink_type:
      enum__pages_v_blocks_relume_pricing_plans_button_link_type('button_link_type').default(
        'reference',
      ),
    buttonLink_url: varchar('button_link_url'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_pricing_plans_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_pricing_plans_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_pricing.id],
      name: '_pages_v_blocks_relume_pricing_plans_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_pricing = pgTable(
  '_pages_v_blocks_relume_pricing',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    tagline: varchar('tagline').default('Prijzen'),
    title: varchar('title').default('Prijsplan'),
    description: varchar('description').default('Ontdek onze flexibele cursusopties voor ouders.'),
    monthlyTabLabel: varchar('monthly_tab_label').default('Maandelijks'),
    yearlyTabLabel: varchar('yearly_tab_label').default('Jaarlijks'),
    backgroundColor:
      enum__pages_v_blocks_relume_pricing_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_pricing_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_pricing_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_pricing_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_pricing_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_team_team_members = pgTable(
  '_pages_v_blocks_relume_team_team_members',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    photo: integer('photo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    name: varchar('name'),
    position: varchar('position'),
    bio: varchar('bio'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_team_team_members_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_team_team_members_parent_id_idx').on(
      columns._parentID,
    ),
    _pages_v_blocks_relume_team_team_members_photo_idx: index(
      '_pages_v_blocks_relume_team_team_members_photo_idx',
    ).on(columns.photo),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_team.id],
      name: '_pages_v_blocks_relume_team_team_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_team_social_links = pgTable(
  '_pages_v_blocks_relume_team_social_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    teamMember: varchar('team_member'),
    platform: plat('platform'),
    url: varchar('url'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_team_social_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_team_social_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_team.id],
      name: '_pages_v_blocks_relume_team_social_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_team = pgTable(
  '_pages_v_blocks_relume_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    tagline: varchar('tagline').default('Team'),
    title: varchar('title').default('Ons Team'),
    description: varchar('description').default('Professionele mediacoaches voor de onderbouw'),
    hiringSection_show: boolean('hiring_section_show').default(true),
    hiringSection_title: varchar('hiring_section_title').default('We werven!'),
    hiringSection_description: varchar('hiring_section_description').default(
      'Word onderdeel van ons groeiende team!',
    ),
    hiringSection_buttonText: varchar('hiring_section_button_text').default('Open posities'),
    hiringSection_buttonLink_type: hs_btn_type('hiring_section_button_link_type').default(
      'reference',
    ),
    hiringSection_buttonLink_url: varchar('hiring_section_button_link_url'),
    backgroundColor:
      enum__pages_v_blocks_relume_team_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_team_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_team_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_contact_contact_methods = pgTable(
  '_pages_v_blocks_relume_contact_contact_methods',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: enum__pages_v_blocks_relume_contact_contact_methods_icon('icon').default('email'),
    title: varchar('title'),
    description: varchar('description'),
    contactInfo: varchar('contact_info'),
    link: varchar('link'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_contact_contact_methods_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_contact_contact_methods_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_relume_contact.id],
      name: '_pages_v_blocks_relume_contact_contact_methods_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_relume_contact = pgTable(
  '_pages_v_blocks_relume_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    backgroundColor:
      enum__pages_v_blocks_relume_contact_background_color('background_color').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_relume_contact_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_relume_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_relume_contact_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_relume_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    postsID: integer('posts_id'),
    testimonialsID: integer('testimonials_id'),
    faqID: integer('faq_id'),
    coursesID: integer('courses_id'),
    ageGroupsID: integer('age_groups_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_testimonials_id_idx: index('_pages_v_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    _pages_v_rels_faq_id_idx: index('_pages_v_rels_faq_id_idx').on(columns.faqID),
    _pages_v_rels_courses_id_idx: index('_pages_v_rels_courses_id_idx').on(columns.coursesID),
    _pages_v_rels_age_groups_id_idx: index('_pages_v_rels_age_groups_id_idx').on(
      columns.ageGroupsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: '_pages_v_rels_testimonials_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: '_pages_v_rels_faq_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: '_pages_v_rels_courses_fk',
    }).onDelete('cascade'),
    ageGroupsIdFk: foreignKey({
      columns: [columns['ageGroupsID']],
      foreignColumns: [age_groups.id],
      name: '_pages_v_rels_age_groups_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const comments = pgTable(
  'comments',
  {
    id: serial('id').primaryKey(),
    content: varchar('content').notNull(),
    author_name: varchar('author_name').notNull(),
    author_email: varchar('author_email').notNull(),
    post: integer('post_id')
      .notNull()
      .references(() => posts.id, {
        onDelete: 'set null',
      }),
    isApproved: boolean('is_approved').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    comments_post_idx: index('comments_post_idx').on(columns.post),
    comments_updated_at_idx: index('comments_updated_at_idx').on(columns.updatedAt),
    comments_created_at_idx: index('comments_created_at_idx').on(columns.createdAt),
  }),
)

export const courses_target_audience = pgTable(
  'courses_target_audience',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_courses_target_audience('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('courses_target_audience_order_idx').on(columns.order),
    parentIdx: index('courses_target_audience_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [courses.id],
      name: 'courses_target_audience_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const courses_features = pgTable(
  'courses_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
  },
  (columns) => ({
    _orderIdx: index('courses_features_order_idx').on(columns._order),
    _parentIDIdx: index('courses_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [courses.id],
      name: 'courses_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const courses_sessions = pgTable(
  'courses_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    duration: varchar('duration'),
  },
  (columns) => ({
    _orderIdx: index('courses_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('courses_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [courses.id],
      name: 'courses_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const courses = pgTable(
  'courses',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    fullDescription: jsonb('full_description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    price: numeric('price'),
    duration: varchar('duration'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_courses_status('_status').default('draft'),
  },
  (columns) => ({
    courses_image_idx: index('courses_image_idx').on(columns.image),
    courses_meta_meta_image_idx: index('courses_meta_meta_image_idx').on(columns.meta_image),
    courses_slug_idx: index('courses_slug_idx').on(columns.slug),
    courses_updated_at_idx: index('courses_updated_at_idx').on(columns.updatedAt),
    courses_created_at_idx: index('courses_created_at_idx').on(columns.createdAt),
    courses__status_idx: index('courses__status_idx').on(columns._status),
  }),
)

export const courses_rels = pgTable(
  'courses_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    testimonialsID: integer('testimonials_id'),
  },
  (columns) => ({
    order: index('courses_rels_order_idx').on(columns.order),
    parentIdx: index('courses_rels_parent_idx').on(columns.parent),
    pathIdx: index('courses_rels_path_idx').on(columns.path),
    courses_rels_testimonials_id_idx: index('courses_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [courses.id],
      name: 'courses_rels_parent_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'courses_rels_testimonials_fk',
    }).onDelete('cascade'),
  }),
)

export const _courses_v_version_target_audience = pgTable(
  '_courses_v_version_target_audience',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum__courses_v_version_target_audience('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('_courses_v_version_target_audience_order_idx').on(columns.order),
    parentIdx: index('_courses_v_version_target_audience_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_version_target_audience_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const _courses_v_version_features = pgTable(
  '_courses_v_version_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    feature: varchar('feature'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_courses_v_version_features_order_idx').on(columns._order),
    _parentIDIdx: index('_courses_v_version_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_version_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _courses_v_version_sessions = pgTable(
  '_courses_v_version_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    duration: varchar('duration'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_courses_v_version_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('_courses_v_version_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_version_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _courses_v = pgTable(
  '_courses_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => courses.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_fullDescription: jsonb('version_full_description'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_price: numeric('version_price'),
    version_duration: varchar('version_duration'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__courses_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _courses_v_parent_idx: index('_courses_v_parent_idx').on(columns.parent),
    _courses_v_version_version_image_idx: index('_courses_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _courses_v_version_meta_version_meta_image_idx: index(
      '_courses_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _courses_v_version_version_slug_idx: index('_courses_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _courses_v_version_version_updated_at_idx: index(
      '_courses_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _courses_v_version_version_created_at_idx: index(
      '_courses_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _courses_v_version_version__status_idx: index('_courses_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _courses_v_created_at_idx: index('_courses_v_created_at_idx').on(columns.createdAt),
    _courses_v_updated_at_idx: index('_courses_v_updated_at_idx').on(columns.updatedAt),
    _courses_v_latest_idx: index('_courses_v_latest_idx').on(columns.latest),
    _courses_v_autosave_idx: index('_courses_v_autosave_idx').on(columns.autosave),
  }),
)

export const _courses_v_rels = pgTable(
  '_courses_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    testimonialsID: integer('testimonials_id'),
  },
  (columns) => ({
    order: index('_courses_v_rels_order_idx').on(columns.order),
    parentIdx: index('_courses_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_courses_v_rels_path_idx').on(columns.path),
    _courses_v_rels_testimonials_id_idx: index('_courses_v_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_rels_parent_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: '_courses_v_rels_testimonials_fk',
    }).onDelete('cascade'),
  }),
)

export const age_groups_content = pgTable(
  'age_groups_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition: enum_age_groups_content_image_position('image_position').default('right'),
  },
  (columns) => ({
    _orderIdx: index('age_groups_content_order_idx').on(columns._order),
    _parentIDIdx: index('age_groups_content_parent_id_idx').on(columns._parentID),
    age_groups_content_image_idx: index('age_groups_content_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [age_groups.id],
      name: 'age_groups_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const age_groups_tips = pgTable(
  'age_groups_tips',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tip: varchar('tip'),
  },
  (columns) => ({
    _orderIdx: index('age_groups_tips_order_idx').on(columns._order),
    _parentIDIdx: index('age_groups_tips_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [age_groups.id],
      name: 'age_groups_tips_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const age_groups_resources = pgTable(
  'age_groups_resources',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    link: varchar('link'),
    type: enum_age_groups_resources_type('type'),
  },
  (columns) => ({
    _orderIdx: index('age_groups_resources_order_idx').on(columns._order),
    _parentIDIdx: index('age_groups_resources_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [age_groups.id],
      name: 'age_groups_resources_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const age_groups = pgTable(
  'age_groups',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    ageRange: varchar('age_range'),
    description: varchar('description'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    order: numeric('order').default('0'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_age_groups_status('_status').default('draft'),
  },
  (columns) => ({
    age_groups_hero_image_idx: index('age_groups_hero_image_idx').on(columns.heroImage),
    age_groups_meta_meta_image_idx: index('age_groups_meta_meta_image_idx').on(columns.meta_image),
    age_groups_slug_idx: index('age_groups_slug_idx').on(columns.slug),
    age_groups_updated_at_idx: index('age_groups_updated_at_idx').on(columns.updatedAt),
    age_groups_created_at_idx: index('age_groups_created_at_idx').on(columns.createdAt),
    age_groups__status_idx: index('age_groups__status_idx').on(columns._status),
  }),
)

export const age_groups_rels = pgTable(
  'age_groups_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    faqID: integer('faq_id'),
    coursesID: integer('courses_id'),
  },
  (columns) => ({
    order: index('age_groups_rels_order_idx').on(columns.order),
    parentIdx: index('age_groups_rels_parent_idx').on(columns.parent),
    pathIdx: index('age_groups_rels_path_idx').on(columns.path),
    age_groups_rels_faq_id_idx: index('age_groups_rels_faq_id_idx').on(columns.faqID),
    age_groups_rels_courses_id_idx: index('age_groups_rels_courses_id_idx').on(columns.coursesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [age_groups.id],
      name: 'age_groups_rels_parent_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'age_groups_rels_faq_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'age_groups_rels_courses_fk',
    }).onDelete('cascade'),
  }),
)

export const _age_groups_v_version_content = pgTable(
  '_age_groups_v_version_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    imagePosition:
      enum__age_groups_v_version_content_image_position('image_position').default('right'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_age_groups_v_version_content_order_idx').on(columns._order),
    _parentIDIdx: index('_age_groups_v_version_content_parent_id_idx').on(columns._parentID),
    _age_groups_v_version_content_image_idx: index('_age_groups_v_version_content_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_age_groups_v.id],
      name: '_age_groups_v_version_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _age_groups_v_version_tips = pgTable(
  '_age_groups_v_version_tips',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    tip: varchar('tip'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_age_groups_v_version_tips_order_idx').on(columns._order),
    _parentIDIdx: index('_age_groups_v_version_tips_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_age_groups_v.id],
      name: '_age_groups_v_version_tips_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _age_groups_v_version_resources = pgTable(
  '_age_groups_v_version_resources',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    link: varchar('link'),
    type: enum__age_groups_v_version_resources_type('type'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_age_groups_v_version_resources_order_idx').on(columns._order),
    _parentIDIdx: index('_age_groups_v_version_resources_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_age_groups_v.id],
      name: '_age_groups_v_version_resources_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _age_groups_v = pgTable(
  '_age_groups_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => age_groups.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_ageRange: varchar('version_age_range'),
    version_description: varchar('version_description'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_order: numeric('version_order').default('0'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__age_groups_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _age_groups_v_parent_idx: index('_age_groups_v_parent_idx').on(columns.parent),
    _age_groups_v_version_version_hero_image_idx: index(
      '_age_groups_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _age_groups_v_version_meta_version_meta_image_idx: index(
      '_age_groups_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _age_groups_v_version_version_slug_idx: index('_age_groups_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _age_groups_v_version_version_updated_at_idx: index(
      '_age_groups_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _age_groups_v_version_version_created_at_idx: index(
      '_age_groups_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _age_groups_v_version_version__status_idx: index(
      '_age_groups_v_version_version__status_idx',
    ).on(columns.version__status),
    _age_groups_v_created_at_idx: index('_age_groups_v_created_at_idx').on(columns.createdAt),
    _age_groups_v_updated_at_idx: index('_age_groups_v_updated_at_idx').on(columns.updatedAt),
    _age_groups_v_latest_idx: index('_age_groups_v_latest_idx').on(columns.latest),
    _age_groups_v_autosave_idx: index('_age_groups_v_autosave_idx').on(columns.autosave),
  }),
)

export const _age_groups_v_rels = pgTable(
  '_age_groups_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    faqID: integer('faq_id'),
    coursesID: integer('courses_id'),
  },
  (columns) => ({
    order: index('_age_groups_v_rels_order_idx').on(columns.order),
    parentIdx: index('_age_groups_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_age_groups_v_rels_path_idx').on(columns.path),
    _age_groups_v_rels_faq_id_idx: index('_age_groups_v_rels_faq_id_idx').on(columns.faqID),
    _age_groups_v_rels_courses_id_idx: index('_age_groups_v_rels_courses_id_idx').on(
      columns.coursesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_age_groups_v.id],
      name: '_age_groups_v_rels_parent_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: '_age_groups_v_rels_faq_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: '_age_groups_v_rels_courses_fk',
    }).onDelete('cascade'),
  }),
)

export const services_benefits = pgTable(
  'services_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: varchar('icon'),
    title: varchar('title'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('services_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('services_benefits_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_features = pgTable(
  'services_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('services_features_order_idx').on(columns._order),
    _parentIDIdx: index('services_features_parent_id_idx').on(columns._parentID),
    services_features_image_idx: index('services_features_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_process = pgTable(
  'services_process',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    step: numeric('step'),
    title: varchar('title'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('services_process_order_idx').on(columns._order),
    _parentIDIdx: index('services_process_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_process_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services = pgTable(
  'services',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    serviceType: enum_services_service_type('service_type'),
    description: varchar('description'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    pricing_hasCustomPricing: boolean('pricing_has_custom_pricing').default(false),
    pricing_price: numeric('pricing_price'),
    pricing_priceDescription: varchar('pricing_price_description'),
    callToAction_title: varchar('call_to_action_title').default('Neem contact op'),
    callToAction_description: varchar('call_to_action_description'),
    callToAction_buttonText: varchar('call_to_action_button_text').default('Contact'),
    callToAction_buttonLink: varchar('call_to_action_button_link').default('/contact'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_services_status('_status').default('draft'),
  },
  (columns) => ({
    services_hero_image_idx: index('services_hero_image_idx').on(columns.heroImage),
    services_meta_meta_image_idx: index('services_meta_meta_image_idx').on(columns.meta_image),
    services_slug_idx: index('services_slug_idx').on(columns.slug),
    services_updated_at_idx: index('services_updated_at_idx').on(columns.updatedAt),
    services_created_at_idx: index('services_created_at_idx').on(columns.createdAt),
    services__status_idx: index('services__status_idx').on(columns._status),
  }),
)

export const services_rels = pgTable(
  'services_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    testimonialsID: integer('testimonials_id'),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('services_rels_order_idx').on(columns.order),
    parentIdx: index('services_rels_parent_idx').on(columns.parent),
    pathIdx: index('services_rels_path_idx').on(columns.path),
    services_rels_testimonials_id_idx: index('services_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    services_rels_services_id_idx: index('services_rels_services_id_idx').on(columns.servicesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [services.id],
      name: 'services_rels_parent_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'services_rels_testimonials_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'services_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_benefits = pgTable(
  '_services_v_version_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: varchar('icon'),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_benefits_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_features = pgTable(
  '_services_v_version_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_features_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_features_parent_id_idx').on(columns._parentID),
    _services_v_version_features_image_idx: index('_services_v_version_features_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_process = pgTable(
  '_services_v_version_process',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    step: numeric('step'),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_process_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_process_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_process_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v = pgTable(
  '_services_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => services.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_serviceType: enum__services_v_version_service_type('version_service_type'),
    version_description: varchar('version_description'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_pricing_hasCustomPricing: boolean('version_pricing_has_custom_pricing').default(false),
    version_pricing_price: numeric('version_pricing_price'),
    version_pricing_priceDescription: varchar('version_pricing_price_description'),
    version_callToAction_title: varchar('version_call_to_action_title').default('Neem contact op'),
    version_callToAction_description: varchar('version_call_to_action_description'),
    version_callToAction_buttonText: varchar('version_call_to_action_button_text').default(
      'Contact',
    ),
    version_callToAction_buttonLink: varchar('version_call_to_action_button_link').default(
      '/contact',
    ),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__services_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _services_v_parent_idx: index('_services_v_parent_idx').on(columns.parent),
    _services_v_version_version_hero_image_idx: index(
      '_services_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _services_v_version_meta_version_meta_image_idx: index(
      '_services_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _services_v_version_version_slug_idx: index('_services_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _services_v_version_version_updated_at_idx: index(
      '_services_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _services_v_version_version_created_at_idx: index(
      '_services_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _services_v_version_version__status_idx: index('_services_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _services_v_created_at_idx: index('_services_v_created_at_idx').on(columns.createdAt),
    _services_v_updated_at_idx: index('_services_v_updated_at_idx').on(columns.updatedAt),
    _services_v_latest_idx: index('_services_v_latest_idx').on(columns.latest),
    _services_v_autosave_idx: index('_services_v_autosave_idx').on(columns.autosave),
  }),
)

export const _services_v_rels = pgTable(
  '_services_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    testimonialsID: integer('testimonials_id'),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('_services_v_rels_order_idx').on(columns.order),
    parentIdx: index('_services_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_services_v_rels_path_idx').on(columns.path),
    _services_v_rels_testimonials_id_idx: index('_services_v_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    _services_v_rels_services_id_idx: index('_services_v_rels_services_id_idx').on(
      columns.servicesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_services_v.id],
      name: '_services_v_rels_parent_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: '_services_v_rels_testimonials_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: '_services_v_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials_tags = pgTable(
  'testimonials_tags',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_testimonials_tags('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('testimonials_tags_order_idx').on(columns.order),
    parentIdx: index('testimonials_tags_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [testimonials.id],
      name: 'testimonials_tags_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials = pgTable(
  'testimonials',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    role: varchar('role'),
    company: varchar('company'),
    content: varchar('content').notNull(),
    rating: enum_testimonials_rating('rating').notNull().default('5'),
    avatar: integer('avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    serviceUsed: enum_testimonials_service_used('service_used').default('general'),
    featured: boolean('featured').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    testimonials_avatar_idx: index('testimonials_avatar_idx').on(columns.avatar),
    testimonials_updated_at_idx: index('testimonials_updated_at_idx').on(columns.updatedAt),
    testimonials_created_at_idx: index('testimonials_created_at_idx').on(columns.createdAt),
  }),
)

export const team_expertise = pgTable(
  'team_expertise',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    area: varchar('area').notNull(),
  },
  (columns) => ({
    _orderIdx: index('team_expertise_order_idx').on(columns._order),
    _parentIDIdx: index('team_expertise_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team.id],
      name: 'team_expertise_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team_qualifications = pgTable(
  'team_qualifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    qualification: varchar('qualification').notNull(),
    institution: varchar('institution'),
    year: numeric('year'),
  },
  (columns) => ({
    _orderIdx: index('team_qualifications_order_idx').on(columns._order),
    _parentIDIdx: index('team_qualifications_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team.id],
      name: 'team_qualifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team = pgTable(
  'team',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    role: varchar('role').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    bio: jsonb('bio').notNull(),
    socialMedia_linkedin: varchar('social_media_linkedin'),
    socialMedia_twitter: varchar('social_media_twitter'),
    socialMedia_instagram: varchar('social_media_instagram'),
    socialMedia_website: varchar('social_media_website'),
    order: numeric('order').notNull().default('0'),
    active: boolean('active').default(true),
    featuredQuote: varchar('featured_quote'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    team_image_idx: index('team_image_idx').on(columns.image),
    team_updated_at_idx: index('team_updated_at_idx').on(columns.updatedAt),
    team_created_at_idx: index('team_created_at_idx').on(columns.createdAt),
  }),
)

export const faq_tags = pgTable(
  'faq_tags',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_faq_tags('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('faq_tags_order_idx').on(columns.order),
    parentIdx: index('faq_tags_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [faq.id],
      name: 'faq_tags_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const faq = pgTable(
  'faq',
  {
    id: serial('id').primaryKey(),
    question: varchar('question').notNull(),
    answer: jsonb('answer').notNull(),
    category: enum_faq_category('category').notNull(),
    order: numeric('order').notNull().default('0'),
    active: boolean('active').default(true),
    helpful: boolean('helpful').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    faq_updated_at_idx: index('faq_updated_at_idx').on(columns.updatedAt),
    faq_created_at_idx: index('faq_created_at_idx').on(columns.createdAt),
  }),
)

export const faq_rels = pgTable(
  'faq_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    faqID: integer('faq_id'),
  },
  (columns) => ({
    order: index('faq_rels_order_idx').on(columns.order),
    parentIdx: index('faq_rels_parent_idx').on(columns.parent),
    pathIdx: index('faq_rels_path_idx').on(columns.path),
    faq_rels_faq_id_idx: index('faq_rels_faq_id_idx').on(columns.faqID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [faq.id],
      name: 'faq_rels_parent_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'faq_rels_faq_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
    commentsID: integer('comments_id'),
    coursesID: integer('courses_id'),
    ageGroupsID: integer('age_groups_id'),
    servicesID: integer('services_id'),
    testimonialsID: integer('testimonials_id'),
    teamID: integer('team_id'),
    faqID: integer('faq_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_comments_id_idx: index(
      'payload_locked_documents_rels_comments_id_idx',
    ).on(columns.commentsID),
    payload_locked_documents_rels_courses_id_idx: index(
      'payload_locked_documents_rels_courses_id_idx',
    ).on(columns.coursesID),
    payload_locked_documents_rels_age_groups_id_idx: index(
      'payload_locked_documents_rels_age_groups_id_idx',
    ).on(columns.ageGroupsID),
    payload_locked_documents_rels_services_id_idx: index(
      'payload_locked_documents_rels_services_id_idx',
    ).on(columns.servicesID),
    payload_locked_documents_rels_testimonials_id_idx: index(
      'payload_locked_documents_rels_testimonials_id_idx',
    ).on(columns.testimonialsID),
    payload_locked_documents_rels_team_id_idx: index(
      'payload_locked_documents_rels_team_id_idx',
    ).on(columns.teamID),
    payload_locked_documents_rels_faq_id_idx: index('payload_locked_documents_rels_faq_id_idx').on(
      columns.faqID,
    ),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    commentsIdFk: foreignKey({
      columns: [columns['commentsID']],
      foreignColumns: [comments.id],
      name: 'payload_locked_documents_rels_comments_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'payload_locked_documents_rels_courses_fk',
    }).onDelete('cascade'),
    ageGroupsIdFk: foreignKey({
      columns: [columns['ageGroupsID']],
      foreignColumns: [age_groups.id],
      name: 'payload_locked_documents_rels_age_groups_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'payload_locked_documents_rels_services_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'payload_locked_documents_rels_testimonials_fk',
    }).onDelete('cascade'),
    teamIdFk: foreignKey({
      columns: [columns['teamID']],
      foreignColumns: [team.id],
      name: 'payload_locked_documents_rels_team_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'payload_locked_documents_rels_faq_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
    description: varchar('description'),
    featured: boolean('featured'),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable(
  'header',
  {
    id: serial('id').primaryKey(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    ctaButton_show: boolean('cta_button_show').default(false),
    ctaButton_link_type:
      enum_header_cta_button_link_type('cta_button_link_type').default('reference'),
    ctaButton_link_newTab: boolean('cta_button_link_new_tab'),
    ctaButton_link_url: varchar('cta_button_link_url'),
    ctaButton_link_label: varchar('cta_button_link_label'),
    ctaButton_style: enum_header_cta_button_style('cta_button_style').default('primary'),
    showSearch: boolean('show_search').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    header_logo_idx: index('header_logo_idx').on(columns.logo),
  }),
)

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const site_settings_maintenance_allowed_i_ps = pgTable(
  'site_settings_maintenance_allowed_i_ps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    ip: varchar('ip'),
  },
  (columns) => ({
    _orderIdx: index('site_settings_maintenance_allowed_i_ps_order_idx').on(columns._order),
    _parentIDIdx: index('site_settings_maintenance_allowed_i_ps_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [site_settings.id],
      name: 'site_settings_maintenance_allowed_i_ps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const site_settings = pgTable(
  'site_settings',
  {
    id: serial('id').primaryKey(),
    siteName: varchar('site_name').notNull().default('Schermblij'),
    siteDescription: varchar('site_description')
      .notNull()
      .default(
        'Hulp bij het vinden van de perfecte balans tussen schermtijd en offline activiteiten voor kinderen.',
      ),
    defaultSEO_title: varchar('default_s_e_o_title').default(
      'Schermblij - Gezonde schermtijd voor kinderen',
    ),
    defaultSEO_description: varchar('default_s_e_o_description').default(
      'Bij Schermblij helpen we ouders om een gezonde balans te creëren tussen online en offline activiteiten. Ontdek hoe digitale media een waardevolle aanvulling kan zijn op het leven van uw kinderen.',
    ),
    defaultSEO_keywords: varchar('default_s_e_o_keywords').default(
      'schermtijd, kinderen, opvoeding, digitale media, balans, ouders, educatie',
    ),
    defaultSEO_ogImage: integer('default_s_e_o_og_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    analytics_googleAnalyticsId: varchar('analytics_google_analytics_id'),
    analytics_googleTagManagerId: varchar('analytics_google_tag_manager_id'),
    analytics_facebookPixelId: varchar('analytics_facebook_pixel_id'),
    maintenance_enabled: boolean('maintenance_enabled').default(false),
    maintenance_message: jsonb('maintenance_message'),
    notifications_enabled: boolean('notifications_enabled').default(false),
    notifications_type: enum_site_settings_notifications_type('notifications_type').default('info'),
    notifications_message: jsonb('notifications_message'),
    notifications_dismissible: boolean('notifications_dismissible').default(true),
    forms_contactEmail: varchar('forms_contact_email').notNull(),
    forms_newsletterProvider: enum_site_settings_forms_newsletter_provider(
      'forms_newsletter_provider',
    ),
    forms_recaptchaSiteKey: varchar('forms_recaptcha_site_key'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    site_settings_default_s_e_o_default_s_e_o_og_image_idx: index(
      'site_settings_default_s_e_o_default_s_e_o_og_image_idx',
    ).on(columns.defaultSEO_ogImage),
  }),
)

export const style_settings_background_colors = pgTable(
  'style_settings_background_colors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    value: varchar('value').notNull(),
    category: enum_style_settings_background_colors_category('category'),
    shade: enum_style_settings_background_colors_shade('shade'),
    isDefault: boolean('is_default'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_background_colors_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_background_colors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings.id],
      name: 'style_settings_background_colors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings_text_colors = pgTable(
  'style_settings_text_colors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    value: varchar('value').notNull(),
    usage: enum_style_settings_text_colors_usage('usage'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_text_colors_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_text_colors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings.id],
      name: 'style_settings_text_colors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings_font_families_weights = pgTable(
  'style_settings_font_families_weights',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_font_families_weights_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_font_families_weights_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings_font_families.id],
      name: 'style_settings_font_families_weights_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings_font_families = pgTable(
  'style_settings_font_families',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    cssValue: varchar('css_value').notNull(),
    category: enum_style_settings_font_families_category('category'),
    isDefault: boolean('is_default'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_font_families_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_font_families_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings.id],
      name: 'style_settings_font_families_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings_font_sizes = pgTable(
  'style_settings_font_sizes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    value: varchar('value').notNull(),
    category: enum_style_settings_font_sizes_category('category'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_font_sizes_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_font_sizes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings.id],
      name: 'style_settings_font_sizes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings_spacing = pgTable(
  'style_settings_spacing',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    value: varchar('value').notNull(),
    usage: varchar('usage'),
  },
  (columns) => ({
    _orderIdx: index('style_settings_spacing_order_idx').on(columns._order),
    _parentIDIdx: index('style_settings_spacing_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [style_settings.id],
      name: 'style_settings_spacing_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const style_settings = pgTable('style_settings', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_blocks_features_features = relations(
  pages_blocks_features_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_features, {
      fields: [pages_blocks_features_features._parentID],
      references: [pages_blocks_features.id],
      relationName: 'features',
    }),
    icon: one(media, {
      fields: [pages_blocks_features_features.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_pages_blocks_features = relations(
  pages_blocks_features,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_features._parentID],
      references: [pages.id],
      relationName: '_blocks_features',
    }),
    features: many(pages_blocks_features_features, {
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_newsletter_c_t_a = relations(
  pages_blocks_newsletter_c_t_a,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_newsletter_c_t_a._parentID],
      references: [pages.id],
      relationName: '_blocks_newsletterCTA',
    }),
    image: one(media, {
      fields: [pages_blocks_newsletter_c_t_a.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_testimonials = relations(
  pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonials._parentID],
      references: [pages.id],
      relationName: '_blocks_testimonials',
    }),
  }),
)
export const relations_pages_blocks_faq = relations(pages_blocks_faq, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_faq._parentID],
    references: [pages.id],
    relationName: '_blocks_faq',
  }),
}))
export const relations_pages_blocks_course_archive_target_audience = relations(
  pages_blocks_course_archive_target_audience,
  ({ one }) => ({
    parent: one(pages_blocks_course_archive, {
      fields: [pages_blocks_course_archive_target_audience.parent],
      references: [pages_blocks_course_archive.id],
      relationName: 'targetAudience',
    }),
  }),
)
export const relations_pages_blocks_course_archive = relations(
  pages_blocks_course_archive,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_course_archive._parentID],
      references: [pages.id],
      relationName: '_blocks_courseArchive',
    }),
    targetAudience: many(pages_blocks_course_archive_target_audience, {
      relationName: 'targetAudience',
    }),
  }),
)
export const relations_pages_blocks_age_groups_archive = relations(
  pages_blocks_age_groups_archive,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_age_groups_archive._parentID],
      references: [pages.id],
      relationName: '_blocks_ageGroupsArchive',
    }),
  }),
)
export const relations_pages_blocks_posts_archive = relations(
  pages_blocks_posts_archive,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_posts_archive._parentID],
      references: [pages.id],
      relationName: '_blocks_postsArchive',
    }),
  }),
)
export const relations_pages_blocks_relume_header_features = relations(
  pages_blocks_relume_header_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_header, {
      fields: [pages_blocks_relume_header_features._parentID],
      references: [pages_blocks_relume_header.id],
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_relume_header = relations(
  pages_blocks_relume_header,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_header._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeHeader',
    }),
    image: one(media, {
      fields: [pages_blocks_relume_header.image],
      references: [media.id],
      relationName: 'image',
    }),
    backgroundImage: one(media, {
      fields: [pages_blocks_relume_header.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
    features: many(pages_blocks_relume_header_features, {
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_relume_layout_features = relations(
  pages_blocks_relume_layout_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_layout, {
      fields: [pages_blocks_relume_layout_features._parentID],
      references: [pages_blocks_relume_layout.id],
      relationName: 'features',
    }),
    icon: one(media, {
      fields: [pages_blocks_relume_layout_features.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_pages_blocks_relume_layout_columns = relations(
  pages_blocks_relume_layout_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_layout, {
      fields: [pages_blocks_relume_layout_columns._parentID],
      references: [pages_blocks_relume_layout.id],
      relationName: 'columns',
    }),
    icon: one(media, {
      fields: [pages_blocks_relume_layout_columns.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_pages_blocks_relume_layout = relations(
  pages_blocks_relume_layout,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_layout._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeLayout',
    }),
    mainImage: one(media, {
      fields: [pages_blocks_relume_layout.mainImage],
      references: [media.id],
      relationName: 'mainImage',
    }),
    features: many(pages_blocks_relume_layout_features, {
      relationName: 'features',
    }),
    columns: many(pages_blocks_relume_layout_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_relume_c_t_a = relations(
  pages_blocks_relume_c_t_a,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_c_t_a._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeCTA',
    }),
    image: one(media, {
      fields: [pages_blocks_relume_c_t_a.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_relume_gallery_images = relations(
  pages_blocks_relume_gallery_images,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_gallery, {
      fields: [pages_blocks_relume_gallery_images._parentID],
      references: [pages_blocks_relume_gallery.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [pages_blocks_relume_gallery_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_relume_gallery = relations(
  pages_blocks_relume_gallery,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_gallery._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeGallery',
    }),
    images: many(pages_blocks_relume_gallery_images, {
      relationName: 'images',
    }),
  }),
)
export const relations_pages_blocks_relume_pricing_plans_features = relations(
  pages_blocks_relume_pricing_plans_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_pricing_plans, {
      fields: [pages_blocks_relume_pricing_plans_features._parentID],
      references: [pages_blocks_relume_pricing_plans.id],
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_relume_pricing_plans = relations(
  pages_blocks_relume_pricing_plans,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_relume_pricing, {
      fields: [pages_blocks_relume_pricing_plans._parentID],
      references: [pages_blocks_relume_pricing.id],
      relationName: 'plans',
    }),
    features: many(pages_blocks_relume_pricing_plans_features, {
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_relume_pricing = relations(
  pages_blocks_relume_pricing,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_pricing._parentID],
      references: [pages.id],
      relationName: '_blocks_relumePricing',
    }),
    plans: many(pages_blocks_relume_pricing_plans, {
      relationName: 'plans',
    }),
  }),
)
export const relations_pages_blocks_relume_team_team_members = relations(
  pages_blocks_relume_team_team_members,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_team, {
      fields: [pages_blocks_relume_team_team_members._parentID],
      references: [pages_blocks_relume_team.id],
      relationName: 'teamMembers',
    }),
    photo: one(media, {
      fields: [pages_blocks_relume_team_team_members.photo],
      references: [media.id],
      relationName: 'photo',
    }),
  }),
)
export const relations_pages_blocks_relume_team_social_links = relations(
  pages_blocks_relume_team_social_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_team, {
      fields: [pages_blocks_relume_team_social_links._parentID],
      references: [pages_blocks_relume_team.id],
      relationName: 'socialLinks',
    }),
  }),
)
export const relations_pages_blocks_relume_team = relations(
  pages_blocks_relume_team,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_team._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeTeam',
    }),
    teamMembers: many(pages_blocks_relume_team_team_members, {
      relationName: 'teamMembers',
    }),
    socialLinks: many(pages_blocks_relume_team_social_links, {
      relationName: 'socialLinks',
    }),
  }),
)
export const relations_pages_blocks_relume_contact_contact_methods = relations(
  pages_blocks_relume_contact_contact_methods,
  ({ one }) => ({
    _parentID: one(pages_blocks_relume_contact, {
      fields: [pages_blocks_relume_contact_contact_methods._parentID],
      references: [pages_blocks_relume_contact.id],
      relationName: 'contactMethods',
    }),
  }),
)
export const relations_pages_blocks_relume_contact = relations(
  pages_blocks_relume_contact,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_relume_contact._parentID],
      references: [pages.id],
      relationName: '_blocks_relumeContact',
    }),
    contactMethods: many(pages_blocks_relume_contact_contact_methods, {
      relationName: 'contactMethods',
    }),
  }),
)
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  testimonialsID: one(testimonials, {
    fields: [pages_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  faqID: one(faq, {
    fields: [pages_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
  coursesID: one(courses, {
    fields: [pages_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
  ageGroupsID: one(age_groups, {
    fields: [pages_rels.ageGroupsID],
    references: [age_groups.id],
    relationName: 'ageGroups',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_features: many(pages_blocks_features, {
    relationName: '_blocks_features',
  }),
  _blocks_newsletterCTA: many(pages_blocks_newsletter_c_t_a, {
    relationName: '_blocks_newsletterCTA',
  }),
  _blocks_testimonials: many(pages_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_faq: many(pages_blocks_faq, {
    relationName: '_blocks_faq',
  }),
  _blocks_courseArchive: many(pages_blocks_course_archive, {
    relationName: '_blocks_courseArchive',
  }),
  _blocks_ageGroupsArchive: many(pages_blocks_age_groups_archive, {
    relationName: '_blocks_ageGroupsArchive',
  }),
  _blocks_postsArchive: many(pages_blocks_posts_archive, {
    relationName: '_blocks_postsArchive',
  }),
  _blocks_relumeHeader: many(pages_blocks_relume_header, {
    relationName: '_blocks_relumeHeader',
  }),
  _blocks_relumeLayout: many(pages_blocks_relume_layout, {
    relationName: '_blocks_relumeLayout',
  }),
  _blocks_relumeCTA: many(pages_blocks_relume_c_t_a, {
    relationName: '_blocks_relumeCTA',
  }),
  _blocks_relumeGallery: many(pages_blocks_relume_gallery, {
    relationName: '_blocks_relumeGallery',
  }),
  _blocks_relumePricing: many(pages_blocks_relume_pricing, {
    relationName: '_blocks_relumePricing',
  }),
  _blocks_relumeTeam: many(pages_blocks_relume_team, {
    relationName: '_blocks_relumeTeam',
  }),
  _blocks_relumeContact: many(pages_blocks_relume_contact, {
    relationName: '_blocks_relumeContact',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_blocks_features_features = relations(
  _pages_v_blocks_features_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_features, {
      fields: [_pages_v_blocks_features_features._parentID],
      references: [_pages_v_blocks_features.id],
      relationName: 'features',
    }),
    icon: one(media, {
      fields: [_pages_v_blocks_features_features.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__pages_v_blocks_features = relations(
  _pages_v_blocks_features,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_features._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_features',
    }),
    features: many(_pages_v_blocks_features_features, {
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_newsletter_c_t_a = relations(
  _pages_v_blocks_newsletter_c_t_a,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_newsletter_c_t_a._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_newsletterCTA',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_newsletter_c_t_a.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_testimonials = relations(
  _pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_testimonials._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_testimonials',
    }),
  }),
)
export const relations__pages_v_blocks_faq = relations(_pages_v_blocks_faq, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_faq._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_faq',
  }),
}))
export const relations__pages_v_blocks_course_archive_target_audience = relations(
  _pages_v_blocks_course_archive_target_audience,
  ({ one }) => ({
    parent: one(_pages_v_blocks_course_archive, {
      fields: [_pages_v_blocks_course_archive_target_audience.parent],
      references: [_pages_v_blocks_course_archive.id],
      relationName: 'targetAudience',
    }),
  }),
)
export const relations__pages_v_blocks_course_archive = relations(
  _pages_v_blocks_course_archive,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_course_archive._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_courseArchive',
    }),
    targetAudience: many(_pages_v_blocks_course_archive_target_audience, {
      relationName: 'targetAudience',
    }),
  }),
)
export const relations__pages_v_blocks_age_groups_archive = relations(
  _pages_v_blocks_age_groups_archive,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_age_groups_archive._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_ageGroupsArchive',
    }),
  }),
)
export const relations__pages_v_blocks_posts_archive = relations(
  _pages_v_blocks_posts_archive,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_posts_archive._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_postsArchive',
    }),
  }),
)
export const relations__pages_v_blocks_relume_header_features = relations(
  _pages_v_blocks_relume_header_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_header, {
      fields: [_pages_v_blocks_relume_header_features._parentID],
      references: [_pages_v_blocks_relume_header.id],
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_relume_header = relations(
  _pages_v_blocks_relume_header,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_header._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeHeader',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_relume_header.image],
      references: [media.id],
      relationName: 'image',
    }),
    backgroundImage: one(media, {
      fields: [_pages_v_blocks_relume_header.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
    features: many(_pages_v_blocks_relume_header_features, {
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_relume_layout_features = relations(
  _pages_v_blocks_relume_layout_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_layout, {
      fields: [_pages_v_blocks_relume_layout_features._parentID],
      references: [_pages_v_blocks_relume_layout.id],
      relationName: 'features',
    }),
    icon: one(media, {
      fields: [_pages_v_blocks_relume_layout_features.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__pages_v_blocks_relume_layout_columns = relations(
  _pages_v_blocks_relume_layout_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_layout, {
      fields: [_pages_v_blocks_relume_layout_columns._parentID],
      references: [_pages_v_blocks_relume_layout.id],
      relationName: 'columns',
    }),
    icon: one(media, {
      fields: [_pages_v_blocks_relume_layout_columns.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__pages_v_blocks_relume_layout = relations(
  _pages_v_blocks_relume_layout,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_layout._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeLayout',
    }),
    mainImage: one(media, {
      fields: [_pages_v_blocks_relume_layout.mainImage],
      references: [media.id],
      relationName: 'mainImage',
    }),
    features: many(_pages_v_blocks_relume_layout_features, {
      relationName: 'features',
    }),
    columns: many(_pages_v_blocks_relume_layout_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_relume_c_t_a = relations(
  _pages_v_blocks_relume_c_t_a,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_c_t_a._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeCTA',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_relume_c_t_a.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_relume_gallery_images = relations(
  _pages_v_blocks_relume_gallery_images,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_gallery, {
      fields: [_pages_v_blocks_relume_gallery_images._parentID],
      references: [_pages_v_blocks_relume_gallery.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_relume_gallery_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_relume_gallery = relations(
  _pages_v_blocks_relume_gallery,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_gallery._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeGallery',
    }),
    images: many(_pages_v_blocks_relume_gallery_images, {
      relationName: 'images',
    }),
  }),
)
export const relations__pages_v_blocks_relume_pricing_plans_features = relations(
  _pages_v_blocks_relume_pricing_plans_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_pricing_plans, {
      fields: [_pages_v_blocks_relume_pricing_plans_features._parentID],
      references: [_pages_v_blocks_relume_pricing_plans.id],
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_relume_pricing_plans = relations(
  _pages_v_blocks_relume_pricing_plans,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_relume_pricing, {
      fields: [_pages_v_blocks_relume_pricing_plans._parentID],
      references: [_pages_v_blocks_relume_pricing.id],
      relationName: 'plans',
    }),
    features: many(_pages_v_blocks_relume_pricing_plans_features, {
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_relume_pricing = relations(
  _pages_v_blocks_relume_pricing,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_pricing._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumePricing',
    }),
    plans: many(_pages_v_blocks_relume_pricing_plans, {
      relationName: 'plans',
    }),
  }),
)
export const relations__pages_v_blocks_relume_team_team_members = relations(
  _pages_v_blocks_relume_team_team_members,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_team, {
      fields: [_pages_v_blocks_relume_team_team_members._parentID],
      references: [_pages_v_blocks_relume_team.id],
      relationName: 'teamMembers',
    }),
    photo: one(media, {
      fields: [_pages_v_blocks_relume_team_team_members.photo],
      references: [media.id],
      relationName: 'photo',
    }),
  }),
)
export const relations__pages_v_blocks_relume_team_social_links = relations(
  _pages_v_blocks_relume_team_social_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_team, {
      fields: [_pages_v_blocks_relume_team_social_links._parentID],
      references: [_pages_v_blocks_relume_team.id],
      relationName: 'socialLinks',
    }),
  }),
)
export const relations__pages_v_blocks_relume_team = relations(
  _pages_v_blocks_relume_team,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_team._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeTeam',
    }),
    teamMembers: many(_pages_v_blocks_relume_team_team_members, {
      relationName: 'teamMembers',
    }),
    socialLinks: many(_pages_v_blocks_relume_team_social_links, {
      relationName: 'socialLinks',
    }),
  }),
)
export const relations__pages_v_blocks_relume_contact_contact_methods = relations(
  _pages_v_blocks_relume_contact_contact_methods,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_relume_contact, {
      fields: [_pages_v_blocks_relume_contact_contact_methods._parentID],
      references: [_pages_v_blocks_relume_contact.id],
      relationName: 'contactMethods',
    }),
  }),
)
export const relations__pages_v_blocks_relume_contact = relations(
  _pages_v_blocks_relume_contact,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_relume_contact._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_relumeContact',
    }),
    contactMethods: many(_pages_v_blocks_relume_contact_contact_methods, {
      relationName: 'contactMethods',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  testimonialsID: one(testimonials, {
    fields: [_pages_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  faqID: one(faq, {
    fields: [_pages_v_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
  coursesID: one(courses, {
    fields: [_pages_v_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
  ageGroupsID: one(age_groups, {
    fields: [_pages_v_rels.ageGroupsID],
    references: [age_groups.id],
    relationName: 'ageGroups',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_features: many(_pages_v_blocks_features, {
    relationName: '_blocks_features',
  }),
  _blocks_newsletterCTA: many(_pages_v_blocks_newsletter_c_t_a, {
    relationName: '_blocks_newsletterCTA',
  }),
  _blocks_testimonials: many(_pages_v_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_faq: many(_pages_v_blocks_faq, {
    relationName: '_blocks_faq',
  }),
  _blocks_courseArchive: many(_pages_v_blocks_course_archive, {
    relationName: '_blocks_courseArchive',
  }),
  _blocks_ageGroupsArchive: many(_pages_v_blocks_age_groups_archive, {
    relationName: '_blocks_ageGroupsArchive',
  }),
  _blocks_postsArchive: many(_pages_v_blocks_posts_archive, {
    relationName: '_blocks_postsArchive',
  }),
  _blocks_relumeHeader: many(_pages_v_blocks_relume_header, {
    relationName: '_blocks_relumeHeader',
  }),
  _blocks_relumeLayout: many(_pages_v_blocks_relume_layout, {
    relationName: '_blocks_relumeLayout',
  }),
  _blocks_relumeCTA: many(_pages_v_blocks_relume_c_t_a, {
    relationName: '_blocks_relumeCTA',
  }),
  _blocks_relumeGallery: many(_pages_v_blocks_relume_gallery, {
    relationName: '_blocks_relumeGallery',
  }),
  _blocks_relumePricing: many(_pages_v_blocks_relume_pricing, {
    relationName: '_blocks_relumePricing',
  }),
  _blocks_relumeTeam: many(_pages_v_blocks_relume_team, {
    relationName: '_blocks_relumeTeam',
  }),
  _blocks_relumeContact: many(_pages_v_blocks_relume_contact, {
    relationName: '_blocks_relumeContact',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_comments = relations(comments, ({ one }) => ({
  post: one(posts, {
    fields: [comments.post],
    references: [posts.id],
    relationName: 'post',
  }),
}))
export const relations_courses_target_audience = relations(courses_target_audience, ({ one }) => ({
  parent: one(courses, {
    fields: [courses_target_audience.parent],
    references: [courses.id],
    relationName: 'targetAudience',
  }),
}))
export const relations_courses_features = relations(courses_features, ({ one }) => ({
  _parentID: one(courses, {
    fields: [courses_features._parentID],
    references: [courses.id],
    relationName: 'features',
  }),
}))
export const relations_courses_sessions = relations(courses_sessions, ({ one }) => ({
  _parentID: one(courses, {
    fields: [courses_sessions._parentID],
    references: [courses.id],
    relationName: 'sessions',
  }),
}))
export const relations_courses_rels = relations(courses_rels, ({ one }) => ({
  parent: one(courses, {
    fields: [courses_rels.parent],
    references: [courses.id],
    relationName: '_rels',
  }),
  testimonialsID: one(testimonials, {
    fields: [courses_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
}))
export const relations_courses = relations(courses, ({ one, many }) => ({
  image: one(media, {
    fields: [courses.image],
    references: [media.id],
    relationName: 'image',
  }),
  targetAudience: many(courses_target_audience, {
    relationName: 'targetAudience',
  }),
  features: many(courses_features, {
    relationName: 'features',
  }),
  sessions: many(courses_sessions, {
    relationName: 'sessions',
  }),
  meta_image: one(media, {
    fields: [courses.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(courses_rels, {
    relationName: '_rels',
  }),
}))
export const relations__courses_v_version_target_audience = relations(
  _courses_v_version_target_audience,
  ({ one }) => ({
    parent: one(_courses_v, {
      fields: [_courses_v_version_target_audience.parent],
      references: [_courses_v.id],
      relationName: 'version_targetAudience',
    }),
  }),
)
export const relations__courses_v_version_features = relations(
  _courses_v_version_features,
  ({ one }) => ({
    _parentID: one(_courses_v, {
      fields: [_courses_v_version_features._parentID],
      references: [_courses_v.id],
      relationName: 'version_features',
    }),
  }),
)
export const relations__courses_v_version_sessions = relations(
  _courses_v_version_sessions,
  ({ one }) => ({
    _parentID: one(_courses_v, {
      fields: [_courses_v_version_sessions._parentID],
      references: [_courses_v.id],
      relationName: 'version_sessions',
    }),
  }),
)
export const relations__courses_v_rels = relations(_courses_v_rels, ({ one }) => ({
  parent: one(_courses_v, {
    fields: [_courses_v_rels.parent],
    references: [_courses_v.id],
    relationName: '_rels',
  }),
  testimonialsID: one(testimonials, {
    fields: [_courses_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
}))
export const relations__courses_v = relations(_courses_v, ({ one, many }) => ({
  parent: one(courses, {
    fields: [_courses_v.parent],
    references: [courses.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_courses_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_targetAudience: many(_courses_v_version_target_audience, {
    relationName: 'version_targetAudience',
  }),
  version_features: many(_courses_v_version_features, {
    relationName: 'version_features',
  }),
  version_sessions: many(_courses_v_version_sessions, {
    relationName: 'version_sessions',
  }),
  version_meta_image: one(media, {
    fields: [_courses_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_courses_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_age_groups_content = relations(age_groups_content, ({ one }) => ({
  _parentID: one(age_groups, {
    fields: [age_groups_content._parentID],
    references: [age_groups.id],
    relationName: 'content',
  }),
  image: one(media, {
    fields: [age_groups_content.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_age_groups_tips = relations(age_groups_tips, ({ one }) => ({
  _parentID: one(age_groups, {
    fields: [age_groups_tips._parentID],
    references: [age_groups.id],
    relationName: 'tips',
  }),
}))
export const relations_age_groups_resources = relations(age_groups_resources, ({ one }) => ({
  _parentID: one(age_groups, {
    fields: [age_groups_resources._parentID],
    references: [age_groups.id],
    relationName: 'resources',
  }),
}))
export const relations_age_groups_rels = relations(age_groups_rels, ({ one }) => ({
  parent: one(age_groups, {
    fields: [age_groups_rels.parent],
    references: [age_groups.id],
    relationName: '_rels',
  }),
  faqID: one(faq, {
    fields: [age_groups_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
  coursesID: one(courses, {
    fields: [age_groups_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
}))
export const relations_age_groups = relations(age_groups, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [age_groups.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  content: many(age_groups_content, {
    relationName: 'content',
  }),
  tips: many(age_groups_tips, {
    relationName: 'tips',
  }),
  resources: many(age_groups_resources, {
    relationName: 'resources',
  }),
  meta_image: one(media, {
    fields: [age_groups.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(age_groups_rels, {
    relationName: '_rels',
  }),
}))
export const relations__age_groups_v_version_content = relations(
  _age_groups_v_version_content,
  ({ one }) => ({
    _parentID: one(_age_groups_v, {
      fields: [_age_groups_v_version_content._parentID],
      references: [_age_groups_v.id],
      relationName: 'version_content',
    }),
    image: one(media, {
      fields: [_age_groups_v_version_content.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__age_groups_v_version_tips = relations(
  _age_groups_v_version_tips,
  ({ one }) => ({
    _parentID: one(_age_groups_v, {
      fields: [_age_groups_v_version_tips._parentID],
      references: [_age_groups_v.id],
      relationName: 'version_tips',
    }),
  }),
)
export const relations__age_groups_v_version_resources = relations(
  _age_groups_v_version_resources,
  ({ one }) => ({
    _parentID: one(_age_groups_v, {
      fields: [_age_groups_v_version_resources._parentID],
      references: [_age_groups_v.id],
      relationName: 'version_resources',
    }),
  }),
)
export const relations__age_groups_v_rels = relations(_age_groups_v_rels, ({ one }) => ({
  parent: one(_age_groups_v, {
    fields: [_age_groups_v_rels.parent],
    references: [_age_groups_v.id],
    relationName: '_rels',
  }),
  faqID: one(faq, {
    fields: [_age_groups_v_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
  coursesID: one(courses, {
    fields: [_age_groups_v_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
}))
export const relations__age_groups_v = relations(_age_groups_v, ({ one, many }) => ({
  parent: one(age_groups, {
    fields: [_age_groups_v.parent],
    references: [age_groups.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_age_groups_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_content: many(_age_groups_v_version_content, {
    relationName: 'version_content',
  }),
  version_tips: many(_age_groups_v_version_tips, {
    relationName: 'version_tips',
  }),
  version_resources: many(_age_groups_v_version_resources, {
    relationName: 'version_resources',
  }),
  version_meta_image: one(media, {
    fields: [_age_groups_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_age_groups_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_services_benefits = relations(services_benefits, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_benefits._parentID],
    references: [services.id],
    relationName: 'benefits',
  }),
}))
export const relations_services_features = relations(services_features, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_features._parentID],
    references: [services.id],
    relationName: 'features',
  }),
  image: one(media, {
    fields: [services_features.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_services_process = relations(services_process, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_process._parentID],
    references: [services.id],
    relationName: 'process',
  }),
}))
export const relations_services_rels = relations(services_rels, ({ one }) => ({
  parent: one(services, {
    fields: [services_rels.parent],
    references: [services.id],
    relationName: '_rels',
  }),
  testimonialsID: one(testimonials, {
    fields: [services_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  servicesID: one(services, {
    fields: [services_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations_services = relations(services, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [services.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  benefits: many(services_benefits, {
    relationName: 'benefits',
  }),
  features: many(services_features, {
    relationName: 'features',
  }),
  process: many(services_process, {
    relationName: 'process',
  }),
  meta_image: one(media, {
    fields: [services.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(services_rels, {
    relationName: '_rels',
  }),
}))
export const relations__services_v_version_benefits = relations(
  _services_v_version_benefits,
  ({ one }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_benefits._parentID],
      references: [_services_v.id],
      relationName: 'version_benefits',
    }),
  }),
)
export const relations__services_v_version_features = relations(
  _services_v_version_features,
  ({ one }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_features._parentID],
      references: [_services_v.id],
      relationName: 'version_features',
    }),
    image: one(media, {
      fields: [_services_v_version_features.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__services_v_version_process = relations(
  _services_v_version_process,
  ({ one }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_process._parentID],
      references: [_services_v.id],
      relationName: 'version_process',
    }),
  }),
)
export const relations__services_v_rels = relations(_services_v_rels, ({ one }) => ({
  parent: one(_services_v, {
    fields: [_services_v_rels.parent],
    references: [_services_v.id],
    relationName: '_rels',
  }),
  testimonialsID: one(testimonials, {
    fields: [_services_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  servicesID: one(services, {
    fields: [_services_v_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations__services_v = relations(_services_v, ({ one, many }) => ({
  parent: one(services, {
    fields: [_services_v.parent],
    references: [services.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_services_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_benefits: many(_services_v_version_benefits, {
    relationName: 'version_benefits',
  }),
  version_features: many(_services_v_version_features, {
    relationName: 'version_features',
  }),
  version_process: many(_services_v_version_process, {
    relationName: 'version_process',
  }),
  version_meta_image: one(media, {
    fields: [_services_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_services_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_testimonials_tags = relations(testimonials_tags, ({ one }) => ({
  parent: one(testimonials, {
    fields: [testimonials_tags.parent],
    references: [testimonials.id],
    relationName: 'tags',
  }),
}))
export const relations_testimonials = relations(testimonials, ({ one, many }) => ({
  avatar: one(media, {
    fields: [testimonials.avatar],
    references: [media.id],
    relationName: 'avatar',
  }),
  tags: many(testimonials_tags, {
    relationName: 'tags',
  }),
}))
export const relations_team_expertise = relations(team_expertise, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_expertise._parentID],
    references: [team.id],
    relationName: 'expertise',
  }),
}))
export const relations_team_qualifications = relations(team_qualifications, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_qualifications._parentID],
    references: [team.id],
    relationName: 'qualifications',
  }),
}))
export const relations_team = relations(team, ({ one, many }) => ({
  image: one(media, {
    fields: [team.image],
    references: [media.id],
    relationName: 'image',
  }),
  expertise: many(team_expertise, {
    relationName: 'expertise',
  }),
  qualifications: many(team_qualifications, {
    relationName: 'qualifications',
  }),
}))
export const relations_faq_tags = relations(faq_tags, ({ one }) => ({
  parent: one(faq, {
    fields: [faq_tags.parent],
    references: [faq.id],
    relationName: 'tags',
  }),
}))
export const relations_faq_rels = relations(faq_rels, ({ one }) => ({
  parent: one(faq, {
    fields: [faq_rels.parent],
    references: [faq.id],
    relationName: '_rels',
  }),
  faqID: one(faq, {
    fields: [faq_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
}))
export const relations_faq = relations(faq, ({ many }) => ({
  tags: many(faq_tags, {
    relationName: 'tags',
  }),
  _rels: many(faq_rels, {
    relationName: '_rels',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    commentsID: one(comments, {
      fields: [payload_locked_documents_rels.commentsID],
      references: [comments.id],
      relationName: 'comments',
    }),
    coursesID: one(courses, {
      fields: [payload_locked_documents_rels.coursesID],
      references: [courses.id],
      relationName: 'courses',
    }),
    ageGroupsID: one(age_groups, {
      fields: [payload_locked_documents_rels.ageGroupsID],
      references: [age_groups.id],
      relationName: 'ageGroups',
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: 'services',
    }),
    testimonialsID: one(testimonials, {
      fields: [payload_locked_documents_rels.testimonialsID],
      references: [testimonials.id],
      relationName: 'testimonials',
    }),
    teamID: one(team, {
      fields: [payload_locked_documents_rels.teamID],
      references: [team.id],
      relationName: 'team',
    }),
    faqID: one(faq, {
      fields: [payload_locked_documents_rels.faqID],
      references: [faq.id],
      relationName: 'faq',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_header = relations(header, ({ one, many }) => ({
  logo: one(media, {
    fields: [header.logo],
    references: [media.id],
    relationName: 'logo',
  }),
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))
export const relations_site_settings_maintenance_allowed_i_ps = relations(
  site_settings_maintenance_allowed_i_ps,
  ({ one }) => ({
    _parentID: one(site_settings, {
      fields: [site_settings_maintenance_allowed_i_ps._parentID],
      references: [site_settings.id],
      relationName: 'maintenance_allowedIPs',
    }),
  }),
)
export const relations_site_settings = relations(site_settings, ({ one, many }) => ({
  defaultSEO_ogImage: one(media, {
    fields: [site_settings.defaultSEO_ogImage],
    references: [media.id],
    relationName: 'defaultSEO_ogImage',
  }),
  maintenance_allowedIPs: many(site_settings_maintenance_allowed_i_ps, {
    relationName: 'maintenance_allowedIPs',
  }),
}))
export const relations_style_settings_background_colors = relations(
  style_settings_background_colors,
  ({ one }) => ({
    _parentID: one(style_settings, {
      fields: [style_settings_background_colors._parentID],
      references: [style_settings.id],
      relationName: 'backgroundColors',
    }),
  }),
)
export const relations_style_settings_text_colors = relations(
  style_settings_text_colors,
  ({ one }) => ({
    _parentID: one(style_settings, {
      fields: [style_settings_text_colors._parentID],
      references: [style_settings.id],
      relationName: 'textColors',
    }),
  }),
)
export const relations_style_settings_font_families_weights = relations(
  style_settings_font_families_weights,
  ({ one }) => ({
    _parentID: one(style_settings_font_families, {
      fields: [style_settings_font_families_weights._parentID],
      references: [style_settings_font_families.id],
      relationName: 'weights',
    }),
  }),
)
export const relations_style_settings_font_families = relations(
  style_settings_font_families,
  ({ one, many }) => ({
    _parentID: one(style_settings, {
      fields: [style_settings_font_families._parentID],
      references: [style_settings.id],
      relationName: 'fontFamilies',
    }),
    weights: many(style_settings_font_families_weights, {
      relationName: 'weights',
    }),
  }),
)
export const relations_style_settings_font_sizes = relations(
  style_settings_font_sizes,
  ({ one }) => ({
    _parentID: one(style_settings, {
      fields: [style_settings_font_sizes._parentID],
      references: [style_settings.id],
      relationName: 'fontSizes',
    }),
  }),
)
export const relations_style_settings_spacing = relations(style_settings_spacing, ({ one }) => ({
  _parentID: one(style_settings, {
    fields: [style_settings_spacing._parentID],
    references: [style_settings.id],
    relationName: 'spacing',
  }),
}))
export const relations_style_settings = relations(style_settings, ({ many }) => ({
  backgroundColors: many(style_settings_background_colors, {
    relationName: 'backgroundColors',
  }),
  textColors: many(style_settings_text_colors, {
    relationName: 'textColors',
  }),
  fontFamilies: many(style_settings_font_families, {
    relationName: 'fontFamilies',
  }),
  fontSizes: many(style_settings_font_sizes, {
    relationName: 'fontSizes',
  }),
  spacing: many(style_settings_spacing, {
    relationName: 'spacing',
  }),
}))

type DatabaseSchema = {
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_cta_background_color: typeof enum_pages_blocks_cta_background_color
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_content_background_color: typeof enum_pages_blocks_content_background_color
  enum_pages_blocks_media_block_background_color: typeof enum_pages_blocks_media_block_background_color
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_blocks_features_features_link_type: typeof enum_pages_blocks_features_features_link_type
  enum_pages_blocks_features_features_link_appearance: typeof enum_pages_blocks_features_features_link_appearance
  enum_pages_blocks_faq_filter_by_category: typeof enum_pages_blocks_faq_filter_by_category
  enum_pages_blocks_course_archive_target_audience: typeof enum_pages_blocks_course_archive_target_audience
  enum_pages_blocks_course_archive_populate_by: typeof enum_pages_blocks_course_archive_populate_by
  enum_pages_blocks_course_archive_layout: typeof enum_pages_blocks_course_archive_layout
  enum_pages_blocks_age_groups_archive_populate_by: typeof enum_pages_blocks_age_groups_archive_populate_by
  enum_pages_blocks_age_groups_archive_layout: typeof enum_pages_blocks_age_groups_archive_layout
  enum_pages_blocks_posts_archive_populate_by: typeof enum_pages_blocks_posts_archive_populate_by
  enum_pages_blocks_posts_archive_layout: typeof enum_pages_blocks_posts_archive_layout
  enum_pages_blocks_relume_header_variant: typeof enum_pages_blocks_relume_header_variant
  enum_pages_blocks_relume_header_image_position: typeof enum_pages_blocks_relume_header_image_position
  enum_pages_blocks_relume_header_alignment: typeof enum_pages_blocks_relume_header_alignment
  enum_pages_blocks_relume_header_background_color: typeof enum_pages_blocks_relume_header_background_color
  enum_pages_blocks_relume_layout_variant: typeof enum_pages_blocks_relume_layout_variant
  enum_pages_blocks_relume_layout_primary_button_variant: typeof enum_pages_blocks_relume_layout_primary_button_variant
  enum_pages_blocks_relume_layout_secondary_button_variant: typeof enum_pages_blocks_relume_layout_secondary_button_variant
  enum_pages_blocks_relume_layout_image_position: typeof enum_pages_blocks_relume_layout_image_position
  enum_pages_blocks_relume_layout_text_alignment: typeof enum_pages_blocks_relume_layout_text_alignment
  enum_pages_blocks_relume_layout_background_color: typeof enum_pages_blocks_relume_layout_background_color
  enum_pages_blocks_relume_c_t_a_variant: typeof enum_pages_blocks_relume_c_t_a_variant
  enum_pages_blocks_relume_c_t_a_button_variant: typeof enum_pages_blocks_relume_c_t_a_button_variant
  enum_pages_blocks_relume_c_t_a_alignment: typeof enum_pages_blocks_relume_c_t_a_alignment
  enum_pages_blocks_relume_c_t_a_background_color: typeof enum_pages_blocks_relume_c_t_a_background_color
  enum_pages_blocks_relume_gallery_images_link_type: typeof enum_pages_blocks_relume_gallery_images_link_type
  enum_pages_blocks_relume_gallery_variant: typeof enum_pages_blocks_relume_gallery_variant
  enum_pages_blocks_relume_gallery_background_color: typeof enum_pages_blocks_relume_gallery_background_color
  enum_pages_blocks_relume_pricing_plans_button_link_type: typeof enum_pages_blocks_relume_pricing_plans_button_link_type
  enum_pages_blocks_relume_pricing_background_color: typeof enum_pages_blocks_relume_pricing_background_color
  plat: typeof plat
  hs_btn_type: typeof hs_btn_type
  enum_pages_blocks_relume_team_background_color: typeof enum_pages_blocks_relume_team_background_color
  enum_pages_blocks_relume_contact_contact_methods_icon: typeof enum_pages_blocks_relume_contact_contact_methods_icon
  enum_pages_blocks_relume_contact_background_color: typeof enum_pages_blocks_relume_contact_background_color
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_cta_background_color: typeof enum__pages_v_blocks_cta_background_color
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_content_background_color: typeof enum__pages_v_blocks_content_background_color
  enum__pages_v_blocks_media_block_background_color: typeof enum__pages_v_blocks_media_block_background_color
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_blocks_features_features_link_type: typeof enum__pages_v_blocks_features_features_link_type
  enum__pages_v_blocks_features_features_link_appearance: typeof enum__pages_v_blocks_features_features_link_appearance
  enum__pages_v_blocks_faq_filter_by_category: typeof enum__pages_v_blocks_faq_filter_by_category
  enum__pages_v_blocks_course_archive_target_audience: typeof enum__pages_v_blocks_course_archive_target_audience
  enum__pages_v_blocks_course_archive_populate_by: typeof enum__pages_v_blocks_course_archive_populate_by
  enum__pages_v_blocks_course_archive_layout: typeof enum__pages_v_blocks_course_archive_layout
  enum__pages_v_blocks_age_groups_archive_populate_by: typeof enum__pages_v_blocks_age_groups_archive_populate_by
  enum__pages_v_blocks_age_groups_archive_layout: typeof enum__pages_v_blocks_age_groups_archive_layout
  enum__pages_v_blocks_posts_archive_populate_by: typeof enum__pages_v_blocks_posts_archive_populate_by
  enum__pages_v_blocks_posts_archive_layout: typeof enum__pages_v_blocks_posts_archive_layout
  enum__pages_v_blocks_relume_header_variant: typeof enum__pages_v_blocks_relume_header_variant
  enum__pages_v_blocks_relume_header_image_position: typeof enum__pages_v_blocks_relume_header_image_position
  enum__pages_v_blocks_relume_header_alignment: typeof enum__pages_v_blocks_relume_header_alignment
  enum__pages_v_blocks_relume_header_background_color: typeof enum__pages_v_blocks_relume_header_background_color
  enum__pages_v_blocks_relume_layout_variant: typeof enum__pages_v_blocks_relume_layout_variant
  enum__pages_v_blocks_relume_layout_primary_button_variant: typeof enum__pages_v_blocks_relume_layout_primary_button_variant
  enum__pages_v_blocks_relume_layout_secondary_button_variant: typeof enum__pages_v_blocks_relume_layout_secondary_button_variant
  enum__pages_v_blocks_relume_layout_image_position: typeof enum__pages_v_blocks_relume_layout_image_position
  enum__pages_v_blocks_relume_layout_text_alignment: typeof enum__pages_v_blocks_relume_layout_text_alignment
  enum__pages_v_blocks_relume_layout_background_color: typeof enum__pages_v_blocks_relume_layout_background_color
  enum__pages_v_blocks_relume_c_t_a_variant: typeof enum__pages_v_blocks_relume_c_t_a_variant
  enum__pages_v_blocks_relume_c_t_a_button_variant: typeof enum__pages_v_blocks_relume_c_t_a_button_variant
  enum__pages_v_blocks_relume_c_t_a_alignment: typeof enum__pages_v_blocks_relume_c_t_a_alignment
  enum__pages_v_blocks_relume_c_t_a_background_color: typeof enum__pages_v_blocks_relume_c_t_a_background_color
  enum__pages_v_blocks_relume_gallery_images_link_type: typeof enum__pages_v_blocks_relume_gallery_images_link_type
  enum__pages_v_blocks_relume_gallery_variant: typeof enum__pages_v_blocks_relume_gallery_variant
  enum__pages_v_blocks_relume_gallery_background_color: typeof enum__pages_v_blocks_relume_gallery_background_color
  enum__pages_v_blocks_relume_pricing_plans_button_link_type: typeof enum__pages_v_blocks_relume_pricing_plans_button_link_type
  enum__pages_v_blocks_relume_pricing_background_color: typeof enum__pages_v_blocks_relume_pricing_background_color
  enum__pages_v_blocks_relume_team_background_color: typeof enum__pages_v_blocks_relume_team_background_color
  enum__pages_v_blocks_relume_contact_contact_methods_icon: typeof enum__pages_v_blocks_relume_contact_contact_methods_icon
  enum__pages_v_blocks_relume_contact_background_color: typeof enum__pages_v_blocks_relume_contact_background_color
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_courses_target_audience: typeof enum_courses_target_audience
  enum_courses_status: typeof enum_courses_status
  enum__courses_v_version_target_audience: typeof enum__courses_v_version_target_audience
  enum__courses_v_version_status: typeof enum__courses_v_version_status
  enum_age_groups_content_image_position: typeof enum_age_groups_content_image_position
  enum_age_groups_resources_type: typeof enum_age_groups_resources_type
  enum_age_groups_status: typeof enum_age_groups_status
  enum__age_groups_v_version_content_image_position: typeof enum__age_groups_v_version_content_image_position
  enum__age_groups_v_version_resources_type: typeof enum__age_groups_v_version_resources_type
  enum__age_groups_v_version_status: typeof enum__age_groups_v_version_status
  enum_services_service_type: typeof enum_services_service_type
  enum_services_status: typeof enum_services_status
  enum__services_v_version_service_type: typeof enum__services_v_version_service_type
  enum__services_v_version_status: typeof enum__services_v_version_status
  enum_testimonials_tags: typeof enum_testimonials_tags
  enum_testimonials_rating: typeof enum_testimonials_rating
  enum_testimonials_service_used: typeof enum_testimonials_service_used
  enum_faq_tags: typeof enum_faq_tags
  enum_faq_category: typeof enum_faq_category
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_header_cta_button_link_type: typeof enum_header_cta_button_link_type
  enum_header_cta_button_style: typeof enum_header_cta_button_style
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  enum_site_settings_notifications_type: typeof enum_site_settings_notifications_type
  enum_site_settings_forms_newsletter_provider: typeof enum_site_settings_forms_newsletter_provider
  enum_style_settings_background_colors_category: typeof enum_style_settings_background_colors_category
  enum_style_settings_background_colors_shade: typeof enum_style_settings_background_colors_shade
  enum_style_settings_text_colors_usage: typeof enum_style_settings_text_colors_usage
  enum_style_settings_font_families_category: typeof enum_style_settings_font_families_category
  enum_style_settings_font_sizes_category: typeof enum_style_settings_font_sizes_category
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages_blocks_features_features: typeof pages_blocks_features_features
  pages_blocks_features: typeof pages_blocks_features
  pages_blocks_newsletter_c_t_a: typeof pages_blocks_newsletter_c_t_a
  pages_blocks_testimonials: typeof pages_blocks_testimonials
  pages_blocks_faq: typeof pages_blocks_faq
  pages_blocks_course_archive_target_audience: typeof pages_blocks_course_archive_target_audience
  pages_blocks_course_archive: typeof pages_blocks_course_archive
  pages_blocks_age_groups_archive: typeof pages_blocks_age_groups_archive
  pages_blocks_posts_archive: typeof pages_blocks_posts_archive
  pages_blocks_relume_header_features: typeof pages_blocks_relume_header_features
  pages_blocks_relume_header: typeof pages_blocks_relume_header
  pages_blocks_relume_layout_features: typeof pages_blocks_relume_layout_features
  pages_blocks_relume_layout_columns: typeof pages_blocks_relume_layout_columns
  pages_blocks_relume_layout: typeof pages_blocks_relume_layout
  pages_blocks_relume_c_t_a: typeof pages_blocks_relume_c_t_a
  pages_blocks_relume_gallery_images: typeof pages_blocks_relume_gallery_images
  pages_blocks_relume_gallery: typeof pages_blocks_relume_gallery
  pages_blocks_relume_pricing_plans_features: typeof pages_blocks_relume_pricing_plans_features
  pages_blocks_relume_pricing_plans: typeof pages_blocks_relume_pricing_plans
  pages_blocks_relume_pricing: typeof pages_blocks_relume_pricing
  pages_blocks_relume_team_team_members: typeof pages_blocks_relume_team_team_members
  pages_blocks_relume_team_social_links: typeof pages_blocks_relume_team_social_links
  pages_blocks_relume_team: typeof pages_blocks_relume_team
  pages_blocks_relume_contact_contact_methods: typeof pages_blocks_relume_contact_contact_methods
  pages_blocks_relume_contact: typeof pages_blocks_relume_contact
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v_blocks_features_features: typeof _pages_v_blocks_features_features
  _pages_v_blocks_features: typeof _pages_v_blocks_features
  _pages_v_blocks_newsletter_c_t_a: typeof _pages_v_blocks_newsletter_c_t_a
  _pages_v_blocks_testimonials: typeof _pages_v_blocks_testimonials
  _pages_v_blocks_faq: typeof _pages_v_blocks_faq
  _pages_v_blocks_course_archive_target_audience: typeof _pages_v_blocks_course_archive_target_audience
  _pages_v_blocks_course_archive: typeof _pages_v_blocks_course_archive
  _pages_v_blocks_age_groups_archive: typeof _pages_v_blocks_age_groups_archive
  _pages_v_blocks_posts_archive: typeof _pages_v_blocks_posts_archive
  _pages_v_blocks_relume_header_features: typeof _pages_v_blocks_relume_header_features
  _pages_v_blocks_relume_header: typeof _pages_v_blocks_relume_header
  _pages_v_blocks_relume_layout_features: typeof _pages_v_blocks_relume_layout_features
  _pages_v_blocks_relume_layout_columns: typeof _pages_v_blocks_relume_layout_columns
  _pages_v_blocks_relume_layout: typeof _pages_v_blocks_relume_layout
  _pages_v_blocks_relume_c_t_a: typeof _pages_v_blocks_relume_c_t_a
  _pages_v_blocks_relume_gallery_images: typeof _pages_v_blocks_relume_gallery_images
  _pages_v_blocks_relume_gallery: typeof _pages_v_blocks_relume_gallery
  _pages_v_blocks_relume_pricing_plans_features: typeof _pages_v_blocks_relume_pricing_plans_features
  _pages_v_blocks_relume_pricing_plans: typeof _pages_v_blocks_relume_pricing_plans
  _pages_v_blocks_relume_pricing: typeof _pages_v_blocks_relume_pricing
  _pages_v_blocks_relume_team_team_members: typeof _pages_v_blocks_relume_team_team_members
  _pages_v_blocks_relume_team_social_links: typeof _pages_v_blocks_relume_team_social_links
  _pages_v_blocks_relume_team: typeof _pages_v_blocks_relume_team
  _pages_v_blocks_relume_contact_contact_methods: typeof _pages_v_blocks_relume_contact_contact_methods
  _pages_v_blocks_relume_contact: typeof _pages_v_blocks_relume_contact
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  users_sessions: typeof users_sessions
  users: typeof users
  comments: typeof comments
  courses_target_audience: typeof courses_target_audience
  courses_features: typeof courses_features
  courses_sessions: typeof courses_sessions
  courses: typeof courses
  courses_rels: typeof courses_rels
  _courses_v_version_target_audience: typeof _courses_v_version_target_audience
  _courses_v_version_features: typeof _courses_v_version_features
  _courses_v_version_sessions: typeof _courses_v_version_sessions
  _courses_v: typeof _courses_v
  _courses_v_rels: typeof _courses_v_rels
  age_groups_content: typeof age_groups_content
  age_groups_tips: typeof age_groups_tips
  age_groups_resources: typeof age_groups_resources
  age_groups: typeof age_groups
  age_groups_rels: typeof age_groups_rels
  _age_groups_v_version_content: typeof _age_groups_v_version_content
  _age_groups_v_version_tips: typeof _age_groups_v_version_tips
  _age_groups_v_version_resources: typeof _age_groups_v_version_resources
  _age_groups_v: typeof _age_groups_v
  _age_groups_v_rels: typeof _age_groups_v_rels
  services_benefits: typeof services_benefits
  services_features: typeof services_features
  services_process: typeof services_process
  services: typeof services
  services_rels: typeof services_rels
  _services_v_version_benefits: typeof _services_v_version_benefits
  _services_v_version_features: typeof _services_v_version_features
  _services_v_version_process: typeof _services_v_version_process
  _services_v: typeof _services_v
  _services_v_rels: typeof _services_v_rels
  testimonials_tags: typeof testimonials_tags
  testimonials: typeof testimonials
  team_expertise: typeof team_expertise
  team_qualifications: typeof team_qualifications
  team: typeof team
  faq_tags: typeof faq_tags
  faq: typeof faq
  faq_rels: typeof faq_rels
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  site_settings_maintenance_allowed_i_ps: typeof site_settings_maintenance_allowed_i_ps
  site_settings: typeof site_settings
  style_settings_background_colors: typeof style_settings_background_colors
  style_settings_text_colors: typeof style_settings_text_colors
  style_settings_font_families_weights: typeof style_settings_font_families_weights
  style_settings_font_families: typeof style_settings_font_families
  style_settings_font_sizes: typeof style_settings_font_sizes
  style_settings_spacing: typeof style_settings_spacing
  style_settings: typeof style_settings
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_blocks_features_features: typeof relations_pages_blocks_features_features
  relations_pages_blocks_features: typeof relations_pages_blocks_features
  relations_pages_blocks_newsletter_c_t_a: typeof relations_pages_blocks_newsletter_c_t_a
  relations_pages_blocks_testimonials: typeof relations_pages_blocks_testimonials
  relations_pages_blocks_faq: typeof relations_pages_blocks_faq
  relations_pages_blocks_course_archive_target_audience: typeof relations_pages_blocks_course_archive_target_audience
  relations_pages_blocks_course_archive: typeof relations_pages_blocks_course_archive
  relations_pages_blocks_age_groups_archive: typeof relations_pages_blocks_age_groups_archive
  relations_pages_blocks_posts_archive: typeof relations_pages_blocks_posts_archive
  relations_pages_blocks_relume_header_features: typeof relations_pages_blocks_relume_header_features
  relations_pages_blocks_relume_header: typeof relations_pages_blocks_relume_header
  relations_pages_blocks_relume_layout_features: typeof relations_pages_blocks_relume_layout_features
  relations_pages_blocks_relume_layout_columns: typeof relations_pages_blocks_relume_layout_columns
  relations_pages_blocks_relume_layout: typeof relations_pages_blocks_relume_layout
  relations_pages_blocks_relume_c_t_a: typeof relations_pages_blocks_relume_c_t_a
  relations_pages_blocks_relume_gallery_images: typeof relations_pages_blocks_relume_gallery_images
  relations_pages_blocks_relume_gallery: typeof relations_pages_blocks_relume_gallery
  relations_pages_blocks_relume_pricing_plans_features: typeof relations_pages_blocks_relume_pricing_plans_features
  relations_pages_blocks_relume_pricing_plans: typeof relations_pages_blocks_relume_pricing_plans
  relations_pages_blocks_relume_pricing: typeof relations_pages_blocks_relume_pricing
  relations_pages_blocks_relume_team_team_members: typeof relations_pages_blocks_relume_team_team_members
  relations_pages_blocks_relume_team_social_links: typeof relations_pages_blocks_relume_team_social_links
  relations_pages_blocks_relume_team: typeof relations_pages_blocks_relume_team
  relations_pages_blocks_relume_contact_contact_methods: typeof relations_pages_blocks_relume_contact_contact_methods
  relations_pages_blocks_relume_contact: typeof relations_pages_blocks_relume_contact
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_blocks_features_features: typeof relations__pages_v_blocks_features_features
  relations__pages_v_blocks_features: typeof relations__pages_v_blocks_features
  relations__pages_v_blocks_newsletter_c_t_a: typeof relations__pages_v_blocks_newsletter_c_t_a
  relations__pages_v_blocks_testimonials: typeof relations__pages_v_blocks_testimonials
  relations__pages_v_blocks_faq: typeof relations__pages_v_blocks_faq
  relations__pages_v_blocks_course_archive_target_audience: typeof relations__pages_v_blocks_course_archive_target_audience
  relations__pages_v_blocks_course_archive: typeof relations__pages_v_blocks_course_archive
  relations__pages_v_blocks_age_groups_archive: typeof relations__pages_v_blocks_age_groups_archive
  relations__pages_v_blocks_posts_archive: typeof relations__pages_v_blocks_posts_archive
  relations__pages_v_blocks_relume_header_features: typeof relations__pages_v_blocks_relume_header_features
  relations__pages_v_blocks_relume_header: typeof relations__pages_v_blocks_relume_header
  relations__pages_v_blocks_relume_layout_features: typeof relations__pages_v_blocks_relume_layout_features
  relations__pages_v_blocks_relume_layout_columns: typeof relations__pages_v_blocks_relume_layout_columns
  relations__pages_v_blocks_relume_layout: typeof relations__pages_v_blocks_relume_layout
  relations__pages_v_blocks_relume_c_t_a: typeof relations__pages_v_blocks_relume_c_t_a
  relations__pages_v_blocks_relume_gallery_images: typeof relations__pages_v_blocks_relume_gallery_images
  relations__pages_v_blocks_relume_gallery: typeof relations__pages_v_blocks_relume_gallery
  relations__pages_v_blocks_relume_pricing_plans_features: typeof relations__pages_v_blocks_relume_pricing_plans_features
  relations__pages_v_blocks_relume_pricing_plans: typeof relations__pages_v_blocks_relume_pricing_plans
  relations__pages_v_blocks_relume_pricing: typeof relations__pages_v_blocks_relume_pricing
  relations__pages_v_blocks_relume_team_team_members: typeof relations__pages_v_blocks_relume_team_team_members
  relations__pages_v_blocks_relume_team_social_links: typeof relations__pages_v_blocks_relume_team_social_links
  relations__pages_v_blocks_relume_team: typeof relations__pages_v_blocks_relume_team
  relations__pages_v_blocks_relume_contact_contact_methods: typeof relations__pages_v_blocks_relume_contact_contact_methods
  relations__pages_v_blocks_relume_contact: typeof relations__pages_v_blocks_relume_contact
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_comments: typeof relations_comments
  relations_courses_target_audience: typeof relations_courses_target_audience
  relations_courses_features: typeof relations_courses_features
  relations_courses_sessions: typeof relations_courses_sessions
  relations_courses_rels: typeof relations_courses_rels
  relations_courses: typeof relations_courses
  relations__courses_v_version_target_audience: typeof relations__courses_v_version_target_audience
  relations__courses_v_version_features: typeof relations__courses_v_version_features
  relations__courses_v_version_sessions: typeof relations__courses_v_version_sessions
  relations__courses_v_rels: typeof relations__courses_v_rels
  relations__courses_v: typeof relations__courses_v
  relations_age_groups_content: typeof relations_age_groups_content
  relations_age_groups_tips: typeof relations_age_groups_tips
  relations_age_groups_resources: typeof relations_age_groups_resources
  relations_age_groups_rels: typeof relations_age_groups_rels
  relations_age_groups: typeof relations_age_groups
  relations__age_groups_v_version_content: typeof relations__age_groups_v_version_content
  relations__age_groups_v_version_tips: typeof relations__age_groups_v_version_tips
  relations__age_groups_v_version_resources: typeof relations__age_groups_v_version_resources
  relations__age_groups_v_rels: typeof relations__age_groups_v_rels
  relations__age_groups_v: typeof relations__age_groups_v
  relations_services_benefits: typeof relations_services_benefits
  relations_services_features: typeof relations_services_features
  relations_services_process: typeof relations_services_process
  relations_services_rels: typeof relations_services_rels
  relations_services: typeof relations_services
  relations__services_v_version_benefits: typeof relations__services_v_version_benefits
  relations__services_v_version_features: typeof relations__services_v_version_features
  relations__services_v_version_process: typeof relations__services_v_version_process
  relations__services_v_rels: typeof relations__services_v_rels
  relations__services_v: typeof relations__services_v
  relations_testimonials_tags: typeof relations_testimonials_tags
  relations_testimonials: typeof relations_testimonials
  relations_team_expertise: typeof relations_team_expertise
  relations_team_qualifications: typeof relations_team_qualifications
  relations_team: typeof relations_team
  relations_faq_tags: typeof relations_faq_tags
  relations_faq_rels: typeof relations_faq_rels
  relations_faq: typeof relations_faq
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
  relations_site_settings_maintenance_allowed_i_ps: typeof relations_site_settings_maintenance_allowed_i_ps
  relations_site_settings: typeof relations_site_settings
  relations_style_settings_background_colors: typeof relations_style_settings_background_colors
  relations_style_settings_text_colors: typeof relations_style_settings_text_colors
  relations_style_settings_font_families_weights: typeof relations_style_settings_font_families_weights
  relations_style_settings_font_families: typeof relations_style_settings_font_families
  relations_style_settings_font_sizes: typeof relations_style_settings_font_sizes
  relations_style_settings_spacing: typeof relations_style_settings_spacing
  relations_style_settings: typeof relations_style_settings
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
